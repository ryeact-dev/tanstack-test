
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Competition` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Competition
 * 
 */
export type CompetitionModel = runtime.Types.Result.DefaultSelection<Prisma.$CompetitionPayload>

export type AggregateCompetition = {
  _count: CompetitionCountAggregateOutputType | null
  _avg: CompetitionAvgAggregateOutputType | null
  _sum: CompetitionSumAggregateOutputType | null
  _min: CompetitionMinAggregateOutputType | null
  _max: CompetitionMaxAggregateOutputType | null
}

export type CompetitionAvgAggregateOutputType = {
  number: number | null
  multiplier: runtime.Decimal | null
  finalists: number | null
}

export type CompetitionSumAggregateOutputType = {
  number: number | null
  multiplier: runtime.Decimal | null
  finalists: number | null
}

export type CompetitionMinAggregateOutputType = {
  id: string | null
  name: string | null
  number: number | null
  createdAt: Date | null
  eventId: string | null
  multiplier: runtime.Decimal | null
  isActive: boolean | null
  isFinalist: boolean | null
  finalists: number | null
}

export type CompetitionMaxAggregateOutputType = {
  id: string | null
  name: string | null
  number: number | null
  createdAt: Date | null
  eventId: string | null
  multiplier: runtime.Decimal | null
  isActive: boolean | null
  isFinalist: boolean | null
  finalists: number | null
}

export type CompetitionCountAggregateOutputType = {
  id: number
  name: number
  number: number
  createdAt: number
  eventId: number
  criteria: number
  multiplier: number
  isActive: number
  isFinalist: number
  finalistList: number
  judgesSubmitted: number
  finalists: number
  _all: number
}


export type CompetitionAvgAggregateInputType = {
  number?: true
  multiplier?: true
  finalists?: true
}

export type CompetitionSumAggregateInputType = {
  number?: true
  multiplier?: true
  finalists?: true
}

export type CompetitionMinAggregateInputType = {
  id?: true
  name?: true
  number?: true
  createdAt?: true
  eventId?: true
  multiplier?: true
  isActive?: true
  isFinalist?: true
  finalists?: true
}

export type CompetitionMaxAggregateInputType = {
  id?: true
  name?: true
  number?: true
  createdAt?: true
  eventId?: true
  multiplier?: true
  isActive?: true
  isFinalist?: true
  finalists?: true
}

export type CompetitionCountAggregateInputType = {
  id?: true
  name?: true
  number?: true
  createdAt?: true
  eventId?: true
  criteria?: true
  multiplier?: true
  isActive?: true
  isFinalist?: true
  finalistList?: true
  judgesSubmitted?: true
  finalists?: true
  _all?: true
}

export type CompetitionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Competition to aggregate.
   */
  where?: Prisma.CompetitionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Competitions to fetch.
   */
  orderBy?: Prisma.CompetitionOrderByWithRelationInput | Prisma.CompetitionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CompetitionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Competitions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Competitions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Competitions
  **/
  _count?: true | CompetitionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CompetitionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CompetitionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CompetitionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CompetitionMaxAggregateInputType
}

export type GetCompetitionAggregateType<T extends CompetitionAggregateArgs> = {
      [P in keyof T & keyof AggregateCompetition]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCompetition[P]>
    : Prisma.GetScalarType<T[P], AggregateCompetition[P]>
}




export type CompetitionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CompetitionWhereInput
  orderBy?: Prisma.CompetitionOrderByWithAggregationInput | Prisma.CompetitionOrderByWithAggregationInput[]
  by: Prisma.CompetitionScalarFieldEnum[] | Prisma.CompetitionScalarFieldEnum
  having?: Prisma.CompetitionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CompetitionCountAggregateInputType | true
  _avg?: CompetitionAvgAggregateInputType
  _sum?: CompetitionSumAggregateInputType
  _min?: CompetitionMinAggregateInputType
  _max?: CompetitionMaxAggregateInputType
}

export type CompetitionGroupByOutputType = {
  id: string
  name: string
  number: number
  createdAt: Date
  eventId: string
  criteria: runtime.JsonValue[]
  multiplier: runtime.Decimal
  isActive: boolean
  isFinalist: boolean
  finalistList: string[]
  judgesSubmitted: string[]
  finalists: number
  _count: CompetitionCountAggregateOutputType | null
  _avg: CompetitionAvgAggregateOutputType | null
  _sum: CompetitionSumAggregateOutputType | null
  _min: CompetitionMinAggregateOutputType | null
  _max: CompetitionMaxAggregateOutputType | null
}

type GetCompetitionGroupByPayload<T extends CompetitionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CompetitionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CompetitionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CompetitionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CompetitionGroupByOutputType[P]>
      }
    >
  > 



export type CompetitionWhereInput = {
  AND?: Prisma.CompetitionWhereInput | Prisma.CompetitionWhereInput[]
  OR?: Prisma.CompetitionWhereInput[]
  NOT?: Prisma.CompetitionWhereInput | Prisma.CompetitionWhereInput[]
  id?: Prisma.StringFilter<"Competition"> | string
  name?: Prisma.StringFilter<"Competition"> | string
  number?: Prisma.IntFilter<"Competition"> | number
  createdAt?: Prisma.DateTimeFilter<"Competition"> | Date | string
  eventId?: Prisma.StringFilter<"Competition"> | string
  criteria?: Prisma.JsonNullableListFilter<"Competition">
  multiplier?: Prisma.DecimalFilter<"Competition"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFilter<"Competition"> | boolean
  isFinalist?: Prisma.BoolFilter<"Competition"> | boolean
  finalistList?: Prisma.StringNullableListFilter<"Competition">
  judgesSubmitted?: Prisma.StringNullableListFilter<"Competition">
  finalists?: Prisma.IntFilter<"Competition"> | number
  event?: Prisma.XOR<Prisma.EventScalarRelationFilter, Prisma.EventWhereInput>
  scoresheet?: Prisma.ScoresheetListRelationFilter
  candidates?: Prisma.CandidateListRelationFilter
  users?: Prisma.UserListRelationFilter
}

export type CompetitionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  number?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  criteria?: Prisma.SortOrder
  multiplier?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  isFinalist?: Prisma.SortOrder
  finalistList?: Prisma.SortOrder
  judgesSubmitted?: Prisma.SortOrder
  finalists?: Prisma.SortOrder
  event?: Prisma.EventOrderByWithRelationInput
  scoresheet?: Prisma.ScoresheetOrderByRelationAggregateInput
  candidates?: Prisma.CandidateOrderByRelationAggregateInput
  users?: Prisma.UserOrderByRelationAggregateInput
}

export type CompetitionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CompetitionWhereInput | Prisma.CompetitionWhereInput[]
  OR?: Prisma.CompetitionWhereInput[]
  NOT?: Prisma.CompetitionWhereInput | Prisma.CompetitionWhereInput[]
  name?: Prisma.StringFilter<"Competition"> | string
  number?: Prisma.IntFilter<"Competition"> | number
  createdAt?: Prisma.DateTimeFilter<"Competition"> | Date | string
  eventId?: Prisma.StringFilter<"Competition"> | string
  criteria?: Prisma.JsonNullableListFilter<"Competition">
  multiplier?: Prisma.DecimalFilter<"Competition"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFilter<"Competition"> | boolean
  isFinalist?: Prisma.BoolFilter<"Competition"> | boolean
  finalistList?: Prisma.StringNullableListFilter<"Competition">
  judgesSubmitted?: Prisma.StringNullableListFilter<"Competition">
  finalists?: Prisma.IntFilter<"Competition"> | number
  event?: Prisma.XOR<Prisma.EventScalarRelationFilter, Prisma.EventWhereInput>
  scoresheet?: Prisma.ScoresheetListRelationFilter
  candidates?: Prisma.CandidateListRelationFilter
  users?: Prisma.UserListRelationFilter
}, "id">

export type CompetitionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  number?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  criteria?: Prisma.SortOrder
  multiplier?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  isFinalist?: Prisma.SortOrder
  finalistList?: Prisma.SortOrder
  judgesSubmitted?: Prisma.SortOrder
  finalists?: Prisma.SortOrder
  _count?: Prisma.CompetitionCountOrderByAggregateInput
  _avg?: Prisma.CompetitionAvgOrderByAggregateInput
  _max?: Prisma.CompetitionMaxOrderByAggregateInput
  _min?: Prisma.CompetitionMinOrderByAggregateInput
  _sum?: Prisma.CompetitionSumOrderByAggregateInput
}

export type CompetitionScalarWhereWithAggregatesInput = {
  AND?: Prisma.CompetitionScalarWhereWithAggregatesInput | Prisma.CompetitionScalarWhereWithAggregatesInput[]
  OR?: Prisma.CompetitionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CompetitionScalarWhereWithAggregatesInput | Prisma.CompetitionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Competition"> | string
  name?: Prisma.StringWithAggregatesFilter<"Competition"> | string
  number?: Prisma.IntWithAggregatesFilter<"Competition"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Competition"> | Date | string
  eventId?: Prisma.StringWithAggregatesFilter<"Competition"> | string
  criteria?: Prisma.JsonNullableListFilter<"Competition">
  multiplier?: Prisma.DecimalWithAggregatesFilter<"Competition"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolWithAggregatesFilter<"Competition"> | boolean
  isFinalist?: Prisma.BoolWithAggregatesFilter<"Competition"> | boolean
  finalistList?: Prisma.StringNullableListFilter<"Competition">
  judgesSubmitted?: Prisma.StringNullableListFilter<"Competition">
  finalists?: Prisma.IntWithAggregatesFilter<"Competition"> | number
}

export type CompetitionCreateInput = {
  id?: string
  name?: string
  number?: number
  createdAt?: Date | string
  criteria?: Prisma.CompetitionCreatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  isFinalist?: boolean
  finalistList?: Prisma.CompetitionCreatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionCreatejudgesSubmittedInput | string[]
  finalists?: number
  event?: Prisma.EventCreateNestedOneWithoutCompetitionsInput
  scoresheet?: Prisma.ScoresheetCreateNestedManyWithoutCompetitionInput
  candidates?: Prisma.CandidateCreateNestedManyWithoutCompetitionsInput
  users?: Prisma.UserCreateNestedManyWithoutCompetitionsInput
}

export type CompetitionUncheckedCreateInput = {
  id?: string
  name?: string
  number?: number
  createdAt?: Date | string
  eventId?: string
  criteria?: Prisma.CompetitionCreatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  isFinalist?: boolean
  finalistList?: Prisma.CompetitionCreatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionCreatejudgesSubmittedInput | string[]
  finalists?: number
  scoresheet?: Prisma.ScoresheetUncheckedCreateNestedManyWithoutCompetitionInput
  candidates?: Prisma.CandidateUncheckedCreateNestedManyWithoutCompetitionsInput
  users?: Prisma.UserUncheckedCreateNestedManyWithoutCompetitionsInput
}

export type CompetitionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  criteria?: Prisma.CompetitionUpdatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isFinalist?: Prisma.BoolFieldUpdateOperationsInput | boolean
  finalistList?: Prisma.CompetitionUpdatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionUpdatejudgesSubmittedInput | string[]
  finalists?: Prisma.IntFieldUpdateOperationsInput | number
  event?: Prisma.EventUpdateOneRequiredWithoutCompetitionsNestedInput
  scoresheet?: Prisma.ScoresheetUpdateManyWithoutCompetitionNestedInput
  candidates?: Prisma.CandidateUpdateManyWithoutCompetitionsNestedInput
  users?: Prisma.UserUpdateManyWithoutCompetitionsNestedInput
}

export type CompetitionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  criteria?: Prisma.CompetitionUpdatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isFinalist?: Prisma.BoolFieldUpdateOperationsInput | boolean
  finalistList?: Prisma.CompetitionUpdatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionUpdatejudgesSubmittedInput | string[]
  finalists?: Prisma.IntFieldUpdateOperationsInput | number
  scoresheet?: Prisma.ScoresheetUncheckedUpdateManyWithoutCompetitionNestedInput
  candidates?: Prisma.CandidateUncheckedUpdateManyWithoutCompetitionsNestedInput
  users?: Prisma.UserUncheckedUpdateManyWithoutCompetitionsNestedInput
}

export type CompetitionCreateManyInput = {
  id?: string
  name?: string
  number?: number
  createdAt?: Date | string
  eventId?: string
  criteria?: Prisma.CompetitionCreatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  isFinalist?: boolean
  finalistList?: Prisma.CompetitionCreatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionCreatejudgesSubmittedInput | string[]
  finalists?: number
}

export type CompetitionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  criteria?: Prisma.CompetitionUpdatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isFinalist?: Prisma.BoolFieldUpdateOperationsInput | boolean
  finalistList?: Prisma.CompetitionUpdatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionUpdatejudgesSubmittedInput | string[]
  finalists?: Prisma.IntFieldUpdateOperationsInput | number
}

export type CompetitionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  criteria?: Prisma.CompetitionUpdatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isFinalist?: Prisma.BoolFieldUpdateOperationsInput | boolean
  finalistList?: Prisma.CompetitionUpdatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionUpdatejudgesSubmittedInput | string[]
  finalists?: Prisma.IntFieldUpdateOperationsInput | number
}

export type CompetitionListRelationFilter = {
  every?: Prisma.CompetitionWhereInput
  some?: Prisma.CompetitionWhereInput
  none?: Prisma.CompetitionWhereInput
}

export type CompetitionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type JsonNullableListFilter<$PrismaModel = never> =
| Prisma.PatchUndefined<
    Prisma.Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
    Required<JsonNullableListFilterBase<$PrismaModel>>
  >
| Prisma.OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

export type JsonNullableListFilterBase<$PrismaModel = never> = {
  equals?: runtime.InputJsonValue[] | Prisma.ListJsonFieldRefInput<$PrismaModel> | null
  has?: runtime.InputJsonValue | Prisma.JsonFieldRefInput<$PrismaModel> | null
  hasEvery?: runtime.InputJsonValue[] | Prisma.ListJsonFieldRefInput<$PrismaModel>
  hasSome?: runtime.InputJsonValue[] | Prisma.ListJsonFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type CompetitionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  number?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  criteria?: Prisma.SortOrder
  multiplier?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  isFinalist?: Prisma.SortOrder
  finalistList?: Prisma.SortOrder
  judgesSubmitted?: Prisma.SortOrder
  finalists?: Prisma.SortOrder
}

export type CompetitionAvgOrderByAggregateInput = {
  number?: Prisma.SortOrder
  multiplier?: Prisma.SortOrder
  finalists?: Prisma.SortOrder
}

export type CompetitionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  number?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  multiplier?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  isFinalist?: Prisma.SortOrder
  finalists?: Prisma.SortOrder
}

export type CompetitionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  number?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  multiplier?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  isFinalist?: Prisma.SortOrder
  finalists?: Prisma.SortOrder
}

export type CompetitionSumOrderByAggregateInput = {
  number?: Prisma.SortOrder
  multiplier?: Prisma.SortOrder
  finalists?: Prisma.SortOrder
}

export type CompetitionScalarRelationFilter = {
  is?: Prisma.CompetitionWhereInput
  isNot?: Prisma.CompetitionWhereInput
}

export type CompetitionCreateNestedManyWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.CompetitionCreateWithoutUsersInput, Prisma.CompetitionUncheckedCreateWithoutUsersInput> | Prisma.CompetitionCreateWithoutUsersInput[] | Prisma.CompetitionUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.CompetitionCreateOrConnectWithoutUsersInput | Prisma.CompetitionCreateOrConnectWithoutUsersInput[]
  connect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
}

export type CompetitionUncheckedCreateNestedManyWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.CompetitionCreateWithoutUsersInput, Prisma.CompetitionUncheckedCreateWithoutUsersInput> | Prisma.CompetitionCreateWithoutUsersInput[] | Prisma.CompetitionUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.CompetitionCreateOrConnectWithoutUsersInput | Prisma.CompetitionCreateOrConnectWithoutUsersInput[]
  connect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
}

export type CompetitionUpdateManyWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.CompetitionCreateWithoutUsersInput, Prisma.CompetitionUncheckedCreateWithoutUsersInput> | Prisma.CompetitionCreateWithoutUsersInput[] | Prisma.CompetitionUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.CompetitionCreateOrConnectWithoutUsersInput | Prisma.CompetitionCreateOrConnectWithoutUsersInput[]
  upsert?: Prisma.CompetitionUpsertWithWhereUniqueWithoutUsersInput | Prisma.CompetitionUpsertWithWhereUniqueWithoutUsersInput[]
  set?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  disconnect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  delete?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  connect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  update?: Prisma.CompetitionUpdateWithWhereUniqueWithoutUsersInput | Prisma.CompetitionUpdateWithWhereUniqueWithoutUsersInput[]
  updateMany?: Prisma.CompetitionUpdateManyWithWhereWithoutUsersInput | Prisma.CompetitionUpdateManyWithWhereWithoutUsersInput[]
  deleteMany?: Prisma.CompetitionScalarWhereInput | Prisma.CompetitionScalarWhereInput[]
}

export type CompetitionUncheckedUpdateManyWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.CompetitionCreateWithoutUsersInput, Prisma.CompetitionUncheckedCreateWithoutUsersInput> | Prisma.CompetitionCreateWithoutUsersInput[] | Prisma.CompetitionUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.CompetitionCreateOrConnectWithoutUsersInput | Prisma.CompetitionCreateOrConnectWithoutUsersInput[]
  upsert?: Prisma.CompetitionUpsertWithWhereUniqueWithoutUsersInput | Prisma.CompetitionUpsertWithWhereUniqueWithoutUsersInput[]
  set?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  disconnect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  delete?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  connect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  update?: Prisma.CompetitionUpdateWithWhereUniqueWithoutUsersInput | Prisma.CompetitionUpdateWithWhereUniqueWithoutUsersInput[]
  updateMany?: Prisma.CompetitionUpdateManyWithWhereWithoutUsersInput | Prisma.CompetitionUpdateManyWithWhereWithoutUsersInput[]
  deleteMany?: Prisma.CompetitionScalarWhereInput | Prisma.CompetitionScalarWhereInput[]
}

export type CompetitionCreateNestedManyWithoutEventInput = {
  create?: Prisma.XOR<Prisma.CompetitionCreateWithoutEventInput, Prisma.CompetitionUncheckedCreateWithoutEventInput> | Prisma.CompetitionCreateWithoutEventInput[] | Prisma.CompetitionUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.CompetitionCreateOrConnectWithoutEventInput | Prisma.CompetitionCreateOrConnectWithoutEventInput[]
  createMany?: Prisma.CompetitionCreateManyEventInputEnvelope
  connect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
}

export type CompetitionUncheckedCreateNestedManyWithoutEventInput = {
  create?: Prisma.XOR<Prisma.CompetitionCreateWithoutEventInput, Prisma.CompetitionUncheckedCreateWithoutEventInput> | Prisma.CompetitionCreateWithoutEventInput[] | Prisma.CompetitionUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.CompetitionCreateOrConnectWithoutEventInput | Prisma.CompetitionCreateOrConnectWithoutEventInput[]
  createMany?: Prisma.CompetitionCreateManyEventInputEnvelope
  connect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
}

export type CompetitionUpdateManyWithoutEventNestedInput = {
  create?: Prisma.XOR<Prisma.CompetitionCreateWithoutEventInput, Prisma.CompetitionUncheckedCreateWithoutEventInput> | Prisma.CompetitionCreateWithoutEventInput[] | Prisma.CompetitionUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.CompetitionCreateOrConnectWithoutEventInput | Prisma.CompetitionCreateOrConnectWithoutEventInput[]
  upsert?: Prisma.CompetitionUpsertWithWhereUniqueWithoutEventInput | Prisma.CompetitionUpsertWithWhereUniqueWithoutEventInput[]
  createMany?: Prisma.CompetitionCreateManyEventInputEnvelope
  set?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  disconnect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  delete?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  connect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  update?: Prisma.CompetitionUpdateWithWhereUniqueWithoutEventInput | Prisma.CompetitionUpdateWithWhereUniqueWithoutEventInput[]
  updateMany?: Prisma.CompetitionUpdateManyWithWhereWithoutEventInput | Prisma.CompetitionUpdateManyWithWhereWithoutEventInput[]
  deleteMany?: Prisma.CompetitionScalarWhereInput | Prisma.CompetitionScalarWhereInput[]
}

export type CompetitionUncheckedUpdateManyWithoutEventNestedInput = {
  create?: Prisma.XOR<Prisma.CompetitionCreateWithoutEventInput, Prisma.CompetitionUncheckedCreateWithoutEventInput> | Prisma.CompetitionCreateWithoutEventInput[] | Prisma.CompetitionUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.CompetitionCreateOrConnectWithoutEventInput | Prisma.CompetitionCreateOrConnectWithoutEventInput[]
  upsert?: Prisma.CompetitionUpsertWithWhereUniqueWithoutEventInput | Prisma.CompetitionUpsertWithWhereUniqueWithoutEventInput[]
  createMany?: Prisma.CompetitionCreateManyEventInputEnvelope
  set?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  disconnect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  delete?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  connect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  update?: Prisma.CompetitionUpdateWithWhereUniqueWithoutEventInput | Prisma.CompetitionUpdateWithWhereUniqueWithoutEventInput[]
  updateMany?: Prisma.CompetitionUpdateManyWithWhereWithoutEventInput | Prisma.CompetitionUpdateManyWithWhereWithoutEventInput[]
  deleteMany?: Prisma.CompetitionScalarWhereInput | Prisma.CompetitionScalarWhereInput[]
}

export type CompetitionCreatecriteriaInput = {
  set: runtime.InputJsonValue[]
}

export type CompetitionCreatefinalistListInput = {
  set: string[]
}

export type CompetitionCreatejudgesSubmittedInput = {
  set: string[]
}

export type CompetitionUpdatecriteriaInput = {
  set?: runtime.InputJsonValue[]
  push?: runtime.InputJsonValue | runtime.InputJsonValue[]
}

export type DecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type CompetitionUpdatefinalistListInput = {
  set?: string[]
  push?: string | string[]
}

export type CompetitionUpdatejudgesSubmittedInput = {
  set?: string[]
  push?: string | string[]
}

export type CompetitionCreateNestedOneWithoutScoresheetInput = {
  create?: Prisma.XOR<Prisma.CompetitionCreateWithoutScoresheetInput, Prisma.CompetitionUncheckedCreateWithoutScoresheetInput>
  connectOrCreate?: Prisma.CompetitionCreateOrConnectWithoutScoresheetInput
  connect?: Prisma.CompetitionWhereUniqueInput
}

export type CompetitionUpdateOneRequiredWithoutScoresheetNestedInput = {
  create?: Prisma.XOR<Prisma.CompetitionCreateWithoutScoresheetInput, Prisma.CompetitionUncheckedCreateWithoutScoresheetInput>
  connectOrCreate?: Prisma.CompetitionCreateOrConnectWithoutScoresheetInput
  upsert?: Prisma.CompetitionUpsertWithoutScoresheetInput
  connect?: Prisma.CompetitionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CompetitionUpdateToOneWithWhereWithoutScoresheetInput, Prisma.CompetitionUpdateWithoutScoresheetInput>, Prisma.CompetitionUncheckedUpdateWithoutScoresheetInput>
}

export type CompetitionCreateNestedManyWithoutCandidatesInput = {
  create?: Prisma.XOR<Prisma.CompetitionCreateWithoutCandidatesInput, Prisma.CompetitionUncheckedCreateWithoutCandidatesInput> | Prisma.CompetitionCreateWithoutCandidatesInput[] | Prisma.CompetitionUncheckedCreateWithoutCandidatesInput[]
  connectOrCreate?: Prisma.CompetitionCreateOrConnectWithoutCandidatesInput | Prisma.CompetitionCreateOrConnectWithoutCandidatesInput[]
  connect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
}

export type CompetitionUncheckedCreateNestedManyWithoutCandidatesInput = {
  create?: Prisma.XOR<Prisma.CompetitionCreateWithoutCandidatesInput, Prisma.CompetitionUncheckedCreateWithoutCandidatesInput> | Prisma.CompetitionCreateWithoutCandidatesInput[] | Prisma.CompetitionUncheckedCreateWithoutCandidatesInput[]
  connectOrCreate?: Prisma.CompetitionCreateOrConnectWithoutCandidatesInput | Prisma.CompetitionCreateOrConnectWithoutCandidatesInput[]
  connect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
}

export type CompetitionUpdateManyWithoutCandidatesNestedInput = {
  create?: Prisma.XOR<Prisma.CompetitionCreateWithoutCandidatesInput, Prisma.CompetitionUncheckedCreateWithoutCandidatesInput> | Prisma.CompetitionCreateWithoutCandidatesInput[] | Prisma.CompetitionUncheckedCreateWithoutCandidatesInput[]
  connectOrCreate?: Prisma.CompetitionCreateOrConnectWithoutCandidatesInput | Prisma.CompetitionCreateOrConnectWithoutCandidatesInput[]
  upsert?: Prisma.CompetitionUpsertWithWhereUniqueWithoutCandidatesInput | Prisma.CompetitionUpsertWithWhereUniqueWithoutCandidatesInput[]
  set?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  disconnect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  delete?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  connect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  update?: Prisma.CompetitionUpdateWithWhereUniqueWithoutCandidatesInput | Prisma.CompetitionUpdateWithWhereUniqueWithoutCandidatesInput[]
  updateMany?: Prisma.CompetitionUpdateManyWithWhereWithoutCandidatesInput | Prisma.CompetitionUpdateManyWithWhereWithoutCandidatesInput[]
  deleteMany?: Prisma.CompetitionScalarWhereInput | Prisma.CompetitionScalarWhereInput[]
}

export type CompetitionUncheckedUpdateManyWithoutCandidatesNestedInput = {
  create?: Prisma.XOR<Prisma.CompetitionCreateWithoutCandidatesInput, Prisma.CompetitionUncheckedCreateWithoutCandidatesInput> | Prisma.CompetitionCreateWithoutCandidatesInput[] | Prisma.CompetitionUncheckedCreateWithoutCandidatesInput[]
  connectOrCreate?: Prisma.CompetitionCreateOrConnectWithoutCandidatesInput | Prisma.CompetitionCreateOrConnectWithoutCandidatesInput[]
  upsert?: Prisma.CompetitionUpsertWithWhereUniqueWithoutCandidatesInput | Prisma.CompetitionUpsertWithWhereUniqueWithoutCandidatesInput[]
  set?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  disconnect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  delete?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  connect?: Prisma.CompetitionWhereUniqueInput | Prisma.CompetitionWhereUniqueInput[]
  update?: Prisma.CompetitionUpdateWithWhereUniqueWithoutCandidatesInput | Prisma.CompetitionUpdateWithWhereUniqueWithoutCandidatesInput[]
  updateMany?: Prisma.CompetitionUpdateManyWithWhereWithoutCandidatesInput | Prisma.CompetitionUpdateManyWithWhereWithoutCandidatesInput[]
  deleteMany?: Prisma.CompetitionScalarWhereInput | Prisma.CompetitionScalarWhereInput[]
}

export type CompetitionCreateWithoutUsersInput = {
  id?: string
  name?: string
  number?: number
  createdAt?: Date | string
  criteria?: Prisma.CompetitionCreatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  isFinalist?: boolean
  finalistList?: Prisma.CompetitionCreatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionCreatejudgesSubmittedInput | string[]
  finalists?: number
  event?: Prisma.EventCreateNestedOneWithoutCompetitionsInput
  scoresheet?: Prisma.ScoresheetCreateNestedManyWithoutCompetitionInput
  candidates?: Prisma.CandidateCreateNestedManyWithoutCompetitionsInput
}

export type CompetitionUncheckedCreateWithoutUsersInput = {
  id?: string
  name?: string
  number?: number
  createdAt?: Date | string
  eventId?: string
  criteria?: Prisma.CompetitionCreatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  isFinalist?: boolean
  finalistList?: Prisma.CompetitionCreatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionCreatejudgesSubmittedInput | string[]
  finalists?: number
  scoresheet?: Prisma.ScoresheetUncheckedCreateNestedManyWithoutCompetitionInput
  candidates?: Prisma.CandidateUncheckedCreateNestedManyWithoutCompetitionsInput
}

export type CompetitionCreateOrConnectWithoutUsersInput = {
  where: Prisma.CompetitionWhereUniqueInput
  create: Prisma.XOR<Prisma.CompetitionCreateWithoutUsersInput, Prisma.CompetitionUncheckedCreateWithoutUsersInput>
}

export type CompetitionUpsertWithWhereUniqueWithoutUsersInput = {
  where: Prisma.CompetitionWhereUniqueInput
  update: Prisma.XOR<Prisma.CompetitionUpdateWithoutUsersInput, Prisma.CompetitionUncheckedUpdateWithoutUsersInput>
  create: Prisma.XOR<Prisma.CompetitionCreateWithoutUsersInput, Prisma.CompetitionUncheckedCreateWithoutUsersInput>
}

export type CompetitionUpdateWithWhereUniqueWithoutUsersInput = {
  where: Prisma.CompetitionWhereUniqueInput
  data: Prisma.XOR<Prisma.CompetitionUpdateWithoutUsersInput, Prisma.CompetitionUncheckedUpdateWithoutUsersInput>
}

export type CompetitionUpdateManyWithWhereWithoutUsersInput = {
  where: Prisma.CompetitionScalarWhereInput
  data: Prisma.XOR<Prisma.CompetitionUpdateManyMutationInput, Prisma.CompetitionUncheckedUpdateManyWithoutUsersInput>
}

export type CompetitionScalarWhereInput = {
  AND?: Prisma.CompetitionScalarWhereInput | Prisma.CompetitionScalarWhereInput[]
  OR?: Prisma.CompetitionScalarWhereInput[]
  NOT?: Prisma.CompetitionScalarWhereInput | Prisma.CompetitionScalarWhereInput[]
  id?: Prisma.StringFilter<"Competition"> | string
  name?: Prisma.StringFilter<"Competition"> | string
  number?: Prisma.IntFilter<"Competition"> | number
  createdAt?: Prisma.DateTimeFilter<"Competition"> | Date | string
  eventId?: Prisma.StringFilter<"Competition"> | string
  criteria?: Prisma.JsonNullableListFilter<"Competition">
  multiplier?: Prisma.DecimalFilter<"Competition"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFilter<"Competition"> | boolean
  isFinalist?: Prisma.BoolFilter<"Competition"> | boolean
  finalistList?: Prisma.StringNullableListFilter<"Competition">
  judgesSubmitted?: Prisma.StringNullableListFilter<"Competition">
  finalists?: Prisma.IntFilter<"Competition"> | number
}

export type CompetitionCreateWithoutEventInput = {
  id?: string
  name?: string
  number?: number
  createdAt?: Date | string
  criteria?: Prisma.CompetitionCreatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  isFinalist?: boolean
  finalistList?: Prisma.CompetitionCreatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionCreatejudgesSubmittedInput | string[]
  finalists?: number
  scoresheet?: Prisma.ScoresheetCreateNestedManyWithoutCompetitionInput
  candidates?: Prisma.CandidateCreateNestedManyWithoutCompetitionsInput
  users?: Prisma.UserCreateNestedManyWithoutCompetitionsInput
}

export type CompetitionUncheckedCreateWithoutEventInput = {
  id?: string
  name?: string
  number?: number
  createdAt?: Date | string
  criteria?: Prisma.CompetitionCreatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  isFinalist?: boolean
  finalistList?: Prisma.CompetitionCreatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionCreatejudgesSubmittedInput | string[]
  finalists?: number
  scoresheet?: Prisma.ScoresheetUncheckedCreateNestedManyWithoutCompetitionInput
  candidates?: Prisma.CandidateUncheckedCreateNestedManyWithoutCompetitionsInput
  users?: Prisma.UserUncheckedCreateNestedManyWithoutCompetitionsInput
}

export type CompetitionCreateOrConnectWithoutEventInput = {
  where: Prisma.CompetitionWhereUniqueInput
  create: Prisma.XOR<Prisma.CompetitionCreateWithoutEventInput, Prisma.CompetitionUncheckedCreateWithoutEventInput>
}

export type CompetitionCreateManyEventInputEnvelope = {
  data: Prisma.CompetitionCreateManyEventInput | Prisma.CompetitionCreateManyEventInput[]
  skipDuplicates?: boolean
}

export type CompetitionUpsertWithWhereUniqueWithoutEventInput = {
  where: Prisma.CompetitionWhereUniqueInput
  update: Prisma.XOR<Prisma.CompetitionUpdateWithoutEventInput, Prisma.CompetitionUncheckedUpdateWithoutEventInput>
  create: Prisma.XOR<Prisma.CompetitionCreateWithoutEventInput, Prisma.CompetitionUncheckedCreateWithoutEventInput>
}

export type CompetitionUpdateWithWhereUniqueWithoutEventInput = {
  where: Prisma.CompetitionWhereUniqueInput
  data: Prisma.XOR<Prisma.CompetitionUpdateWithoutEventInput, Prisma.CompetitionUncheckedUpdateWithoutEventInput>
}

export type CompetitionUpdateManyWithWhereWithoutEventInput = {
  where: Prisma.CompetitionScalarWhereInput
  data: Prisma.XOR<Prisma.CompetitionUpdateManyMutationInput, Prisma.CompetitionUncheckedUpdateManyWithoutEventInput>
}

export type CompetitionCreateWithoutScoresheetInput = {
  id?: string
  name?: string
  number?: number
  createdAt?: Date | string
  criteria?: Prisma.CompetitionCreatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  isFinalist?: boolean
  finalistList?: Prisma.CompetitionCreatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionCreatejudgesSubmittedInput | string[]
  finalists?: number
  event?: Prisma.EventCreateNestedOneWithoutCompetitionsInput
  candidates?: Prisma.CandidateCreateNestedManyWithoutCompetitionsInput
  users?: Prisma.UserCreateNestedManyWithoutCompetitionsInput
}

export type CompetitionUncheckedCreateWithoutScoresheetInput = {
  id?: string
  name?: string
  number?: number
  createdAt?: Date | string
  eventId?: string
  criteria?: Prisma.CompetitionCreatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  isFinalist?: boolean
  finalistList?: Prisma.CompetitionCreatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionCreatejudgesSubmittedInput | string[]
  finalists?: number
  candidates?: Prisma.CandidateUncheckedCreateNestedManyWithoutCompetitionsInput
  users?: Prisma.UserUncheckedCreateNestedManyWithoutCompetitionsInput
}

export type CompetitionCreateOrConnectWithoutScoresheetInput = {
  where: Prisma.CompetitionWhereUniqueInput
  create: Prisma.XOR<Prisma.CompetitionCreateWithoutScoresheetInput, Prisma.CompetitionUncheckedCreateWithoutScoresheetInput>
}

export type CompetitionUpsertWithoutScoresheetInput = {
  update: Prisma.XOR<Prisma.CompetitionUpdateWithoutScoresheetInput, Prisma.CompetitionUncheckedUpdateWithoutScoresheetInput>
  create: Prisma.XOR<Prisma.CompetitionCreateWithoutScoresheetInput, Prisma.CompetitionUncheckedCreateWithoutScoresheetInput>
  where?: Prisma.CompetitionWhereInput
}

export type CompetitionUpdateToOneWithWhereWithoutScoresheetInput = {
  where?: Prisma.CompetitionWhereInput
  data: Prisma.XOR<Prisma.CompetitionUpdateWithoutScoresheetInput, Prisma.CompetitionUncheckedUpdateWithoutScoresheetInput>
}

export type CompetitionUpdateWithoutScoresheetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  criteria?: Prisma.CompetitionUpdatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isFinalist?: Prisma.BoolFieldUpdateOperationsInput | boolean
  finalistList?: Prisma.CompetitionUpdatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionUpdatejudgesSubmittedInput | string[]
  finalists?: Prisma.IntFieldUpdateOperationsInput | number
  event?: Prisma.EventUpdateOneRequiredWithoutCompetitionsNestedInput
  candidates?: Prisma.CandidateUpdateManyWithoutCompetitionsNestedInput
  users?: Prisma.UserUpdateManyWithoutCompetitionsNestedInput
}

export type CompetitionUncheckedUpdateWithoutScoresheetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  criteria?: Prisma.CompetitionUpdatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isFinalist?: Prisma.BoolFieldUpdateOperationsInput | boolean
  finalistList?: Prisma.CompetitionUpdatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionUpdatejudgesSubmittedInput | string[]
  finalists?: Prisma.IntFieldUpdateOperationsInput | number
  candidates?: Prisma.CandidateUncheckedUpdateManyWithoutCompetitionsNestedInput
  users?: Prisma.UserUncheckedUpdateManyWithoutCompetitionsNestedInput
}

export type CompetitionCreateWithoutCandidatesInput = {
  id?: string
  name?: string
  number?: number
  createdAt?: Date | string
  criteria?: Prisma.CompetitionCreatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  isFinalist?: boolean
  finalistList?: Prisma.CompetitionCreatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionCreatejudgesSubmittedInput | string[]
  finalists?: number
  event?: Prisma.EventCreateNestedOneWithoutCompetitionsInput
  scoresheet?: Prisma.ScoresheetCreateNestedManyWithoutCompetitionInput
  users?: Prisma.UserCreateNestedManyWithoutCompetitionsInput
}

export type CompetitionUncheckedCreateWithoutCandidatesInput = {
  id?: string
  name?: string
  number?: number
  createdAt?: Date | string
  eventId?: string
  criteria?: Prisma.CompetitionCreatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  isFinalist?: boolean
  finalistList?: Prisma.CompetitionCreatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionCreatejudgesSubmittedInput | string[]
  finalists?: number
  scoresheet?: Prisma.ScoresheetUncheckedCreateNestedManyWithoutCompetitionInput
  users?: Prisma.UserUncheckedCreateNestedManyWithoutCompetitionsInput
}

export type CompetitionCreateOrConnectWithoutCandidatesInput = {
  where: Prisma.CompetitionWhereUniqueInput
  create: Prisma.XOR<Prisma.CompetitionCreateWithoutCandidatesInput, Prisma.CompetitionUncheckedCreateWithoutCandidatesInput>
}

export type CompetitionUpsertWithWhereUniqueWithoutCandidatesInput = {
  where: Prisma.CompetitionWhereUniqueInput
  update: Prisma.XOR<Prisma.CompetitionUpdateWithoutCandidatesInput, Prisma.CompetitionUncheckedUpdateWithoutCandidatesInput>
  create: Prisma.XOR<Prisma.CompetitionCreateWithoutCandidatesInput, Prisma.CompetitionUncheckedCreateWithoutCandidatesInput>
}

export type CompetitionUpdateWithWhereUniqueWithoutCandidatesInput = {
  where: Prisma.CompetitionWhereUniqueInput
  data: Prisma.XOR<Prisma.CompetitionUpdateWithoutCandidatesInput, Prisma.CompetitionUncheckedUpdateWithoutCandidatesInput>
}

export type CompetitionUpdateManyWithWhereWithoutCandidatesInput = {
  where: Prisma.CompetitionScalarWhereInput
  data: Prisma.XOR<Prisma.CompetitionUpdateManyMutationInput, Prisma.CompetitionUncheckedUpdateManyWithoutCandidatesInput>
}

export type CompetitionUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  criteria?: Prisma.CompetitionUpdatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isFinalist?: Prisma.BoolFieldUpdateOperationsInput | boolean
  finalistList?: Prisma.CompetitionUpdatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionUpdatejudgesSubmittedInput | string[]
  finalists?: Prisma.IntFieldUpdateOperationsInput | number
  event?: Prisma.EventUpdateOneRequiredWithoutCompetitionsNestedInput
  scoresheet?: Prisma.ScoresheetUpdateManyWithoutCompetitionNestedInput
  candidates?: Prisma.CandidateUpdateManyWithoutCompetitionsNestedInput
}

export type CompetitionUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  criteria?: Prisma.CompetitionUpdatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isFinalist?: Prisma.BoolFieldUpdateOperationsInput | boolean
  finalistList?: Prisma.CompetitionUpdatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionUpdatejudgesSubmittedInput | string[]
  finalists?: Prisma.IntFieldUpdateOperationsInput | number
  scoresheet?: Prisma.ScoresheetUncheckedUpdateManyWithoutCompetitionNestedInput
  candidates?: Prisma.CandidateUncheckedUpdateManyWithoutCompetitionsNestedInput
}

export type CompetitionUncheckedUpdateManyWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  criteria?: Prisma.CompetitionUpdatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isFinalist?: Prisma.BoolFieldUpdateOperationsInput | boolean
  finalistList?: Prisma.CompetitionUpdatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionUpdatejudgesSubmittedInput | string[]
  finalists?: Prisma.IntFieldUpdateOperationsInput | number
}

export type CompetitionCreateManyEventInput = {
  id?: string
  name?: string
  number?: number
  createdAt?: Date | string
  criteria?: Prisma.CompetitionCreatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  isFinalist?: boolean
  finalistList?: Prisma.CompetitionCreatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionCreatejudgesSubmittedInput | string[]
  finalists?: number
}

export type CompetitionUpdateWithoutEventInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  criteria?: Prisma.CompetitionUpdatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isFinalist?: Prisma.BoolFieldUpdateOperationsInput | boolean
  finalistList?: Prisma.CompetitionUpdatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionUpdatejudgesSubmittedInput | string[]
  finalists?: Prisma.IntFieldUpdateOperationsInput | number
  scoresheet?: Prisma.ScoresheetUpdateManyWithoutCompetitionNestedInput
  candidates?: Prisma.CandidateUpdateManyWithoutCompetitionsNestedInput
  users?: Prisma.UserUpdateManyWithoutCompetitionsNestedInput
}

export type CompetitionUncheckedUpdateWithoutEventInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  criteria?: Prisma.CompetitionUpdatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isFinalist?: Prisma.BoolFieldUpdateOperationsInput | boolean
  finalistList?: Prisma.CompetitionUpdatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionUpdatejudgesSubmittedInput | string[]
  finalists?: Prisma.IntFieldUpdateOperationsInput | number
  scoresheet?: Prisma.ScoresheetUncheckedUpdateManyWithoutCompetitionNestedInput
  candidates?: Prisma.CandidateUncheckedUpdateManyWithoutCompetitionsNestedInput
  users?: Prisma.UserUncheckedUpdateManyWithoutCompetitionsNestedInput
}

export type CompetitionUncheckedUpdateManyWithoutEventInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  criteria?: Prisma.CompetitionUpdatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isFinalist?: Prisma.BoolFieldUpdateOperationsInput | boolean
  finalistList?: Prisma.CompetitionUpdatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionUpdatejudgesSubmittedInput | string[]
  finalists?: Prisma.IntFieldUpdateOperationsInput | number
}

export type CompetitionUpdateWithoutCandidatesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  criteria?: Prisma.CompetitionUpdatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isFinalist?: Prisma.BoolFieldUpdateOperationsInput | boolean
  finalistList?: Prisma.CompetitionUpdatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionUpdatejudgesSubmittedInput | string[]
  finalists?: Prisma.IntFieldUpdateOperationsInput | number
  event?: Prisma.EventUpdateOneRequiredWithoutCompetitionsNestedInput
  scoresheet?: Prisma.ScoresheetUpdateManyWithoutCompetitionNestedInput
  users?: Prisma.UserUpdateManyWithoutCompetitionsNestedInput
}

export type CompetitionUncheckedUpdateWithoutCandidatesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  criteria?: Prisma.CompetitionUpdatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isFinalist?: Prisma.BoolFieldUpdateOperationsInput | boolean
  finalistList?: Prisma.CompetitionUpdatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionUpdatejudgesSubmittedInput | string[]
  finalists?: Prisma.IntFieldUpdateOperationsInput | number
  scoresheet?: Prisma.ScoresheetUncheckedUpdateManyWithoutCompetitionNestedInput
  users?: Prisma.UserUncheckedUpdateManyWithoutCompetitionsNestedInput
}

export type CompetitionUncheckedUpdateManyWithoutCandidatesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  criteria?: Prisma.CompetitionUpdatecriteriaInput | runtime.InputJsonValue[]
  multiplier?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isFinalist?: Prisma.BoolFieldUpdateOperationsInput | boolean
  finalistList?: Prisma.CompetitionUpdatefinalistListInput | string[]
  judgesSubmitted?: Prisma.CompetitionUpdatejudgesSubmittedInput | string[]
  finalists?: Prisma.IntFieldUpdateOperationsInput | number
}


/**
 * Count Type CompetitionCountOutputType
 */

export type CompetitionCountOutputType = {
  scoresheet: number
  candidates: number
  users: number
}

export type CompetitionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  scoresheet?: boolean | CompetitionCountOutputTypeCountScoresheetArgs
  candidates?: boolean | CompetitionCountOutputTypeCountCandidatesArgs
  users?: boolean | CompetitionCountOutputTypeCountUsersArgs
}

/**
 * CompetitionCountOutputType without action
 */
export type CompetitionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompetitionCountOutputType
   */
  select?: Prisma.CompetitionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CompetitionCountOutputType without action
 */
export type CompetitionCountOutputTypeCountScoresheetArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ScoresheetWhereInput
}

/**
 * CompetitionCountOutputType without action
 */
export type CompetitionCountOutputTypeCountCandidatesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CandidateWhereInput
}

/**
 * CompetitionCountOutputType without action
 */
export type CompetitionCountOutputTypeCountUsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWhereInput
}


export type CompetitionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  number?: boolean
  createdAt?: boolean
  eventId?: boolean
  criteria?: boolean
  multiplier?: boolean
  isActive?: boolean
  isFinalist?: boolean
  finalistList?: boolean
  judgesSubmitted?: boolean
  finalists?: boolean
  event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
  scoresheet?: boolean | Prisma.Competition$scoresheetArgs<ExtArgs>
  candidates?: boolean | Prisma.Competition$candidatesArgs<ExtArgs>
  users?: boolean | Prisma.Competition$usersArgs<ExtArgs>
  _count?: boolean | Prisma.CompetitionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["competition"]>

export type CompetitionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  number?: boolean
  createdAt?: boolean
  eventId?: boolean
  criteria?: boolean
  multiplier?: boolean
  isActive?: boolean
  isFinalist?: boolean
  finalistList?: boolean
  judgesSubmitted?: boolean
  finalists?: boolean
  event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}, ExtArgs["result"]["competition"]>

export type CompetitionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  number?: boolean
  createdAt?: boolean
  eventId?: boolean
  criteria?: boolean
  multiplier?: boolean
  isActive?: boolean
  isFinalist?: boolean
  finalistList?: boolean
  judgesSubmitted?: boolean
  finalists?: boolean
  event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}, ExtArgs["result"]["competition"]>

export type CompetitionSelectScalar = {
  id?: boolean
  name?: boolean
  number?: boolean
  createdAt?: boolean
  eventId?: boolean
  criteria?: boolean
  multiplier?: boolean
  isActive?: boolean
  isFinalist?: boolean
  finalistList?: boolean
  judgesSubmitted?: boolean
  finalists?: boolean
}

export type CompetitionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "number" | "createdAt" | "eventId" | "criteria" | "multiplier" | "isActive" | "isFinalist" | "finalistList" | "judgesSubmitted" | "finalists", ExtArgs["result"]["competition"]>
export type CompetitionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
  scoresheet?: boolean | Prisma.Competition$scoresheetArgs<ExtArgs>
  candidates?: boolean | Prisma.Competition$candidatesArgs<ExtArgs>
  users?: boolean | Prisma.Competition$usersArgs<ExtArgs>
  _count?: boolean | Prisma.CompetitionCountOutputTypeDefaultArgs<ExtArgs>
}
export type CompetitionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}
export type CompetitionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}

export type $CompetitionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Competition"
  objects: {
    event: Prisma.$EventPayload<ExtArgs>
    scoresheet: Prisma.$ScoresheetPayload<ExtArgs>[]
    candidates: Prisma.$CandidatePayload<ExtArgs>[]
    users: Prisma.$UserPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    number: number
    createdAt: Date
    eventId: string
    criteria: runtime.JsonValue[]
    multiplier: runtime.Decimal
    isActive: boolean
    isFinalist: boolean
    finalistList: string[]
    judgesSubmitted: string[]
    finalists: number
  }, ExtArgs["result"]["competition"]>
  composites: {}
}

export type CompetitionGetPayload<S extends boolean | null | undefined | CompetitionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CompetitionPayload, S>

export type CompetitionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CompetitionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CompetitionCountAggregateInputType | true
  }

export interface CompetitionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Competition'], meta: { name: 'Competition' } }
  /**
   * Find zero or one Competition that matches the filter.
   * @param {CompetitionFindUniqueArgs} args - Arguments to find a Competition
   * @example
   * // Get one Competition
   * const competition = await prisma.competition.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CompetitionFindUniqueArgs>(args: Prisma.SelectSubset<T, CompetitionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CompetitionClient<runtime.Types.Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Competition that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CompetitionFindUniqueOrThrowArgs} args - Arguments to find a Competition
   * @example
   * // Get one Competition
   * const competition = await prisma.competition.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CompetitionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CompetitionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CompetitionClient<runtime.Types.Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Competition that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompetitionFindFirstArgs} args - Arguments to find a Competition
   * @example
   * // Get one Competition
   * const competition = await prisma.competition.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CompetitionFindFirstArgs>(args?: Prisma.SelectSubset<T, CompetitionFindFirstArgs<ExtArgs>>): Prisma.Prisma__CompetitionClient<runtime.Types.Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Competition that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompetitionFindFirstOrThrowArgs} args - Arguments to find a Competition
   * @example
   * // Get one Competition
   * const competition = await prisma.competition.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CompetitionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CompetitionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CompetitionClient<runtime.Types.Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Competitions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompetitionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Competitions
   * const competitions = await prisma.competition.findMany()
   * 
   * // Get first 10 Competitions
   * const competitions = await prisma.competition.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const competitionWithIdOnly = await prisma.competition.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CompetitionFindManyArgs>(args?: Prisma.SelectSubset<T, CompetitionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Competition.
   * @param {CompetitionCreateArgs} args - Arguments to create a Competition.
   * @example
   * // Create one Competition
   * const Competition = await prisma.competition.create({
   *   data: {
   *     // ... data to create a Competition
   *   }
   * })
   * 
   */
  create<T extends CompetitionCreateArgs>(args: Prisma.SelectSubset<T, CompetitionCreateArgs<ExtArgs>>): Prisma.Prisma__CompetitionClient<runtime.Types.Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Competitions.
   * @param {CompetitionCreateManyArgs} args - Arguments to create many Competitions.
   * @example
   * // Create many Competitions
   * const competition = await prisma.competition.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CompetitionCreateManyArgs>(args?: Prisma.SelectSubset<T, CompetitionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Competitions and returns the data saved in the database.
   * @param {CompetitionCreateManyAndReturnArgs} args - Arguments to create many Competitions.
   * @example
   * // Create many Competitions
   * const competition = await prisma.competition.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Competitions and only return the `id`
   * const competitionWithIdOnly = await prisma.competition.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CompetitionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CompetitionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Competition.
   * @param {CompetitionDeleteArgs} args - Arguments to delete one Competition.
   * @example
   * // Delete one Competition
   * const Competition = await prisma.competition.delete({
   *   where: {
   *     // ... filter to delete one Competition
   *   }
   * })
   * 
   */
  delete<T extends CompetitionDeleteArgs>(args: Prisma.SelectSubset<T, CompetitionDeleteArgs<ExtArgs>>): Prisma.Prisma__CompetitionClient<runtime.Types.Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Competition.
   * @param {CompetitionUpdateArgs} args - Arguments to update one Competition.
   * @example
   * // Update one Competition
   * const competition = await prisma.competition.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CompetitionUpdateArgs>(args: Prisma.SelectSubset<T, CompetitionUpdateArgs<ExtArgs>>): Prisma.Prisma__CompetitionClient<runtime.Types.Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Competitions.
   * @param {CompetitionDeleteManyArgs} args - Arguments to filter Competitions to delete.
   * @example
   * // Delete a few Competitions
   * const { count } = await prisma.competition.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CompetitionDeleteManyArgs>(args?: Prisma.SelectSubset<T, CompetitionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Competitions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompetitionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Competitions
   * const competition = await prisma.competition.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CompetitionUpdateManyArgs>(args: Prisma.SelectSubset<T, CompetitionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Competitions and returns the data updated in the database.
   * @param {CompetitionUpdateManyAndReturnArgs} args - Arguments to update many Competitions.
   * @example
   * // Update many Competitions
   * const competition = await prisma.competition.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Competitions and only return the `id`
   * const competitionWithIdOnly = await prisma.competition.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CompetitionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CompetitionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Competition.
   * @param {CompetitionUpsertArgs} args - Arguments to update or create a Competition.
   * @example
   * // Update or create a Competition
   * const competition = await prisma.competition.upsert({
   *   create: {
   *     // ... data to create a Competition
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Competition we want to update
   *   }
   * })
   */
  upsert<T extends CompetitionUpsertArgs>(args: Prisma.SelectSubset<T, CompetitionUpsertArgs<ExtArgs>>): Prisma.Prisma__CompetitionClient<runtime.Types.Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Competitions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompetitionCountArgs} args - Arguments to filter Competitions to count.
   * @example
   * // Count the number of Competitions
   * const count = await prisma.competition.count({
   *   where: {
   *     // ... the filter for the Competitions we want to count
   *   }
   * })
  **/
  count<T extends CompetitionCountArgs>(
    args?: Prisma.Subset<T, CompetitionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CompetitionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Competition.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompetitionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CompetitionAggregateArgs>(args: Prisma.Subset<T, CompetitionAggregateArgs>): Prisma.PrismaPromise<GetCompetitionAggregateType<T>>

  /**
   * Group by Competition.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompetitionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CompetitionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CompetitionGroupByArgs['orderBy'] }
      : { orderBy?: CompetitionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CompetitionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompetitionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Competition model
 */
readonly fields: CompetitionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Competition.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CompetitionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  event<T extends Prisma.EventDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EventDefaultArgs<ExtArgs>>): Prisma.Prisma__EventClient<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  scoresheet<T extends Prisma.Competition$scoresheetArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Competition$scoresheetArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScoresheetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  candidates<T extends Prisma.Competition$candidatesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Competition$candidatesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  users<T extends Prisma.Competition$usersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Competition$usersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Competition model
 */
export interface CompetitionFieldRefs {
  readonly id: Prisma.FieldRef<"Competition", 'String'>
  readonly name: Prisma.FieldRef<"Competition", 'String'>
  readonly number: Prisma.FieldRef<"Competition", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Competition", 'DateTime'>
  readonly eventId: Prisma.FieldRef<"Competition", 'String'>
  readonly criteria: Prisma.FieldRef<"Competition", 'Json[]'>
  readonly multiplier: Prisma.FieldRef<"Competition", 'Decimal'>
  readonly isActive: Prisma.FieldRef<"Competition", 'Boolean'>
  readonly isFinalist: Prisma.FieldRef<"Competition", 'Boolean'>
  readonly finalistList: Prisma.FieldRef<"Competition", 'String[]'>
  readonly judgesSubmitted: Prisma.FieldRef<"Competition", 'String[]'>
  readonly finalists: Prisma.FieldRef<"Competition", 'Int'>
}
    

// Custom InputTypes
/**
 * Competition findUnique
 */
export type CompetitionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Competition
   */
  select?: Prisma.CompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Competition
   */
  omit?: Prisma.CompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitionInclude<ExtArgs> | null
  /**
   * Filter, which Competition to fetch.
   */
  where: Prisma.CompetitionWhereUniqueInput
}

/**
 * Competition findUniqueOrThrow
 */
export type CompetitionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Competition
   */
  select?: Prisma.CompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Competition
   */
  omit?: Prisma.CompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitionInclude<ExtArgs> | null
  /**
   * Filter, which Competition to fetch.
   */
  where: Prisma.CompetitionWhereUniqueInput
}

/**
 * Competition findFirst
 */
export type CompetitionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Competition
   */
  select?: Prisma.CompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Competition
   */
  omit?: Prisma.CompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitionInclude<ExtArgs> | null
  /**
   * Filter, which Competition to fetch.
   */
  where?: Prisma.CompetitionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Competitions to fetch.
   */
  orderBy?: Prisma.CompetitionOrderByWithRelationInput | Prisma.CompetitionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Competitions.
   */
  cursor?: Prisma.CompetitionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Competitions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Competitions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Competitions.
   */
  distinct?: Prisma.CompetitionScalarFieldEnum | Prisma.CompetitionScalarFieldEnum[]
}

/**
 * Competition findFirstOrThrow
 */
export type CompetitionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Competition
   */
  select?: Prisma.CompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Competition
   */
  omit?: Prisma.CompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitionInclude<ExtArgs> | null
  /**
   * Filter, which Competition to fetch.
   */
  where?: Prisma.CompetitionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Competitions to fetch.
   */
  orderBy?: Prisma.CompetitionOrderByWithRelationInput | Prisma.CompetitionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Competitions.
   */
  cursor?: Prisma.CompetitionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Competitions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Competitions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Competitions.
   */
  distinct?: Prisma.CompetitionScalarFieldEnum | Prisma.CompetitionScalarFieldEnum[]
}

/**
 * Competition findMany
 */
export type CompetitionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Competition
   */
  select?: Prisma.CompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Competition
   */
  omit?: Prisma.CompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitionInclude<ExtArgs> | null
  /**
   * Filter, which Competitions to fetch.
   */
  where?: Prisma.CompetitionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Competitions to fetch.
   */
  orderBy?: Prisma.CompetitionOrderByWithRelationInput | Prisma.CompetitionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Competitions.
   */
  cursor?: Prisma.CompetitionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Competitions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Competitions.
   */
  skip?: number
  distinct?: Prisma.CompetitionScalarFieldEnum | Prisma.CompetitionScalarFieldEnum[]
}

/**
 * Competition create
 */
export type CompetitionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Competition
   */
  select?: Prisma.CompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Competition
   */
  omit?: Prisma.CompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitionInclude<ExtArgs> | null
  /**
   * The data needed to create a Competition.
   */
  data: Prisma.XOR<Prisma.CompetitionCreateInput, Prisma.CompetitionUncheckedCreateInput>
}

/**
 * Competition createMany
 */
export type CompetitionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Competitions.
   */
  data: Prisma.CompetitionCreateManyInput | Prisma.CompetitionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Competition createManyAndReturn
 */
export type CompetitionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Competition
   */
  select?: Prisma.CompetitionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Competition
   */
  omit?: Prisma.CompetitionOmit<ExtArgs> | null
  /**
   * The data used to create many Competitions.
   */
  data: Prisma.CompetitionCreateManyInput | Prisma.CompetitionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Competition update
 */
export type CompetitionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Competition
   */
  select?: Prisma.CompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Competition
   */
  omit?: Prisma.CompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitionInclude<ExtArgs> | null
  /**
   * The data needed to update a Competition.
   */
  data: Prisma.XOR<Prisma.CompetitionUpdateInput, Prisma.CompetitionUncheckedUpdateInput>
  /**
   * Choose, which Competition to update.
   */
  where: Prisma.CompetitionWhereUniqueInput
}

/**
 * Competition updateMany
 */
export type CompetitionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Competitions.
   */
  data: Prisma.XOR<Prisma.CompetitionUpdateManyMutationInput, Prisma.CompetitionUncheckedUpdateManyInput>
  /**
   * Filter which Competitions to update
   */
  where?: Prisma.CompetitionWhereInput
  /**
   * Limit how many Competitions to update.
   */
  limit?: number
}

/**
 * Competition updateManyAndReturn
 */
export type CompetitionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Competition
   */
  select?: Prisma.CompetitionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Competition
   */
  omit?: Prisma.CompetitionOmit<ExtArgs> | null
  /**
   * The data used to update Competitions.
   */
  data: Prisma.XOR<Prisma.CompetitionUpdateManyMutationInput, Prisma.CompetitionUncheckedUpdateManyInput>
  /**
   * Filter which Competitions to update
   */
  where?: Prisma.CompetitionWhereInput
  /**
   * Limit how many Competitions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Competition upsert
 */
export type CompetitionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Competition
   */
  select?: Prisma.CompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Competition
   */
  omit?: Prisma.CompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitionInclude<ExtArgs> | null
  /**
   * The filter to search for the Competition to update in case it exists.
   */
  where: Prisma.CompetitionWhereUniqueInput
  /**
   * In case the Competition found by the `where` argument doesn't exist, create a new Competition with this data.
   */
  create: Prisma.XOR<Prisma.CompetitionCreateInput, Prisma.CompetitionUncheckedCreateInput>
  /**
   * In case the Competition was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CompetitionUpdateInput, Prisma.CompetitionUncheckedUpdateInput>
}

/**
 * Competition delete
 */
export type CompetitionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Competition
   */
  select?: Prisma.CompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Competition
   */
  omit?: Prisma.CompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitionInclude<ExtArgs> | null
  /**
   * Filter which Competition to delete.
   */
  where: Prisma.CompetitionWhereUniqueInput
}

/**
 * Competition deleteMany
 */
export type CompetitionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Competitions to delete
   */
  where?: Prisma.CompetitionWhereInput
  /**
   * Limit how many Competitions to delete.
   */
  limit?: number
}

/**
 * Competition.scoresheet
 */
export type Competition$scoresheetArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scoresheet
   */
  select?: Prisma.ScoresheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scoresheet
   */
  omit?: Prisma.ScoresheetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScoresheetInclude<ExtArgs> | null
  where?: Prisma.ScoresheetWhereInput
  orderBy?: Prisma.ScoresheetOrderByWithRelationInput | Prisma.ScoresheetOrderByWithRelationInput[]
  cursor?: Prisma.ScoresheetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ScoresheetScalarFieldEnum | Prisma.ScoresheetScalarFieldEnum[]
}

/**
 * Competition.candidates
 */
export type Competition$candidatesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Candidate
   */
  select?: Prisma.CandidateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Candidate
   */
  omit?: Prisma.CandidateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CandidateInclude<ExtArgs> | null
  where?: Prisma.CandidateWhereInput
  orderBy?: Prisma.CandidateOrderByWithRelationInput | Prisma.CandidateOrderByWithRelationInput[]
  cursor?: Prisma.CandidateWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CandidateScalarFieldEnum | Prisma.CandidateScalarFieldEnum[]
}

/**
 * Competition.users
 */
export type Competition$usersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  cursor?: Prisma.UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * Competition without action
 */
export type CompetitionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Competition
   */
  select?: Prisma.CompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Competition
   */
  omit?: Prisma.CompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitionInclude<ExtArgs> | null
}
