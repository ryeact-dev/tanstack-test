
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Candidate` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Candidate
 * 
 */
export type CandidateModel = runtime.Types.Result.DefaultSelection<Prisma.$CandidatePayload>

export type AggregateCandidate = {
  _count: CandidateCountAggregateOutputType | null
  _avg: CandidateAvgAggregateOutputType | null
  _sum: CandidateSumAggregateOutputType | null
  _min: CandidateMinAggregateOutputType | null
  _max: CandidateMaxAggregateOutputType | null
}

export type CandidateAvgAggregateOutputType = {
  number: number | null
}

export type CandidateSumAggregateOutputType = {
  number: number | null
}

export type CandidateMinAggregateOutputType = {
  id: string | null
  fullName: string | null
  number: number | null
  course: string | null
  photo: string | null
  createdAt: Date | null
  eventId: string | null
}

export type CandidateMaxAggregateOutputType = {
  id: string | null
  fullName: string | null
  number: number | null
  course: string | null
  photo: string | null
  createdAt: Date | null
  eventId: string | null
}

export type CandidateCountAggregateOutputType = {
  id: number
  fullName: number
  number: number
  course: number
  photo: number
  createdAt: number
  eventId: number
  _all: number
}


export type CandidateAvgAggregateInputType = {
  number?: true
}

export type CandidateSumAggregateInputType = {
  number?: true
}

export type CandidateMinAggregateInputType = {
  id?: true
  fullName?: true
  number?: true
  course?: true
  photo?: true
  createdAt?: true
  eventId?: true
}

export type CandidateMaxAggregateInputType = {
  id?: true
  fullName?: true
  number?: true
  course?: true
  photo?: true
  createdAt?: true
  eventId?: true
}

export type CandidateCountAggregateInputType = {
  id?: true
  fullName?: true
  number?: true
  course?: true
  photo?: true
  createdAt?: true
  eventId?: true
  _all?: true
}

export type CandidateAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Candidate to aggregate.
   */
  where?: Prisma.CandidateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Candidates to fetch.
   */
  orderBy?: Prisma.CandidateOrderByWithRelationInput | Prisma.CandidateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CandidateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Candidates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Candidates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Candidates
  **/
  _count?: true | CandidateCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CandidateAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CandidateSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CandidateMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CandidateMaxAggregateInputType
}

export type GetCandidateAggregateType<T extends CandidateAggregateArgs> = {
      [P in keyof T & keyof AggregateCandidate]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCandidate[P]>
    : Prisma.GetScalarType<T[P], AggregateCandidate[P]>
}




export type CandidateGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CandidateWhereInput
  orderBy?: Prisma.CandidateOrderByWithAggregationInput | Prisma.CandidateOrderByWithAggregationInput[]
  by: Prisma.CandidateScalarFieldEnum[] | Prisma.CandidateScalarFieldEnum
  having?: Prisma.CandidateScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CandidateCountAggregateInputType | true
  _avg?: CandidateAvgAggregateInputType
  _sum?: CandidateSumAggregateInputType
  _min?: CandidateMinAggregateInputType
  _max?: CandidateMaxAggregateInputType
}

export type CandidateGroupByOutputType = {
  id: string
  fullName: string
  number: number
  course: string
  photo: string
  createdAt: Date
  eventId: string
  _count: CandidateCountAggregateOutputType | null
  _avg: CandidateAvgAggregateOutputType | null
  _sum: CandidateSumAggregateOutputType | null
  _min: CandidateMinAggregateOutputType | null
  _max: CandidateMaxAggregateOutputType | null
}

type GetCandidateGroupByPayload<T extends CandidateGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CandidateGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CandidateGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CandidateGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CandidateGroupByOutputType[P]>
      }
    >
  > 



export type CandidateWhereInput = {
  AND?: Prisma.CandidateWhereInput | Prisma.CandidateWhereInput[]
  OR?: Prisma.CandidateWhereInput[]
  NOT?: Prisma.CandidateWhereInput | Prisma.CandidateWhereInput[]
  id?: Prisma.StringFilter<"Candidate"> | string
  fullName?: Prisma.StringFilter<"Candidate"> | string
  number?: Prisma.IntFilter<"Candidate"> | number
  course?: Prisma.StringFilter<"Candidate"> | string
  photo?: Prisma.StringFilter<"Candidate"> | string
  createdAt?: Prisma.DateTimeFilter<"Candidate"> | Date | string
  eventId?: Prisma.StringFilter<"Candidate"> | string
  event?: Prisma.XOR<Prisma.EventScalarRelationFilter, Prisma.EventWhereInput>
  scoresheet?: Prisma.ScoresheetListRelationFilter
  competitions?: Prisma.CompetitionListRelationFilter
}

export type CandidateOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  number?: Prisma.SortOrder
  course?: Prisma.SortOrder
  photo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  event?: Prisma.EventOrderByWithRelationInput
  scoresheet?: Prisma.ScoresheetOrderByRelationAggregateInput
  competitions?: Prisma.CompetitionOrderByRelationAggregateInput
}

export type CandidateWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CandidateWhereInput | Prisma.CandidateWhereInput[]
  OR?: Prisma.CandidateWhereInput[]
  NOT?: Prisma.CandidateWhereInput | Prisma.CandidateWhereInput[]
  fullName?: Prisma.StringFilter<"Candidate"> | string
  number?: Prisma.IntFilter<"Candidate"> | number
  course?: Prisma.StringFilter<"Candidate"> | string
  photo?: Prisma.StringFilter<"Candidate"> | string
  createdAt?: Prisma.DateTimeFilter<"Candidate"> | Date | string
  eventId?: Prisma.StringFilter<"Candidate"> | string
  event?: Prisma.XOR<Prisma.EventScalarRelationFilter, Prisma.EventWhereInput>
  scoresheet?: Prisma.ScoresheetListRelationFilter
  competitions?: Prisma.CompetitionListRelationFilter
}, "id">

export type CandidateOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  number?: Prisma.SortOrder
  course?: Prisma.SortOrder
  photo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  _count?: Prisma.CandidateCountOrderByAggregateInput
  _avg?: Prisma.CandidateAvgOrderByAggregateInput
  _max?: Prisma.CandidateMaxOrderByAggregateInput
  _min?: Prisma.CandidateMinOrderByAggregateInput
  _sum?: Prisma.CandidateSumOrderByAggregateInput
}

export type CandidateScalarWhereWithAggregatesInput = {
  AND?: Prisma.CandidateScalarWhereWithAggregatesInput | Prisma.CandidateScalarWhereWithAggregatesInput[]
  OR?: Prisma.CandidateScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CandidateScalarWhereWithAggregatesInput | Prisma.CandidateScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Candidate"> | string
  fullName?: Prisma.StringWithAggregatesFilter<"Candidate"> | string
  number?: Prisma.IntWithAggregatesFilter<"Candidate"> | number
  course?: Prisma.StringWithAggregatesFilter<"Candidate"> | string
  photo?: Prisma.StringWithAggregatesFilter<"Candidate"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Candidate"> | Date | string
  eventId?: Prisma.StringWithAggregatesFilter<"Candidate"> | string
}

export type CandidateCreateInput = {
  id?: string
  fullName?: string
  number?: number
  course?: string
  photo?: string
  createdAt?: Date | string
  event: Prisma.EventCreateNestedOneWithoutCandidatesInput
  scoresheet?: Prisma.ScoresheetCreateNestedManyWithoutCandidateInput
  competitions?: Prisma.CompetitionCreateNestedManyWithoutCandidatesInput
}

export type CandidateUncheckedCreateInput = {
  id?: string
  fullName?: string
  number?: number
  course?: string
  photo?: string
  createdAt?: Date | string
  eventId: string
  scoresheet?: Prisma.ScoresheetUncheckedCreateNestedManyWithoutCandidateInput
  competitions?: Prisma.CompetitionUncheckedCreateNestedManyWithoutCandidatesInput
}

export type CandidateUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  course?: Prisma.StringFieldUpdateOperationsInput | string
  photo?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  event?: Prisma.EventUpdateOneRequiredWithoutCandidatesNestedInput
  scoresheet?: Prisma.ScoresheetUpdateManyWithoutCandidateNestedInput
  competitions?: Prisma.CompetitionUpdateManyWithoutCandidatesNestedInput
}

export type CandidateUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  course?: Prisma.StringFieldUpdateOperationsInput | string
  photo?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  scoresheet?: Prisma.ScoresheetUncheckedUpdateManyWithoutCandidateNestedInput
  competitions?: Prisma.CompetitionUncheckedUpdateManyWithoutCandidatesNestedInput
}

export type CandidateCreateManyInput = {
  id?: string
  fullName?: string
  number?: number
  course?: string
  photo?: string
  createdAt?: Date | string
  eventId: string
}

export type CandidateUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  course?: Prisma.StringFieldUpdateOperationsInput | string
  photo?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CandidateUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  course?: Prisma.StringFieldUpdateOperationsInput | string
  photo?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CandidateListRelationFilter = {
  every?: Prisma.CandidateWhereInput
  some?: Prisma.CandidateWhereInput
  none?: Prisma.CandidateWhereInput
}

export type CandidateOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CandidateScalarRelationFilter = {
  is?: Prisma.CandidateWhereInput
  isNot?: Prisma.CandidateWhereInput
}

export type CandidateCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  number?: Prisma.SortOrder
  course?: Prisma.SortOrder
  photo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
}

export type CandidateAvgOrderByAggregateInput = {
  number?: Prisma.SortOrder
}

export type CandidateMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  number?: Prisma.SortOrder
  course?: Prisma.SortOrder
  photo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
}

export type CandidateMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  number?: Prisma.SortOrder
  course?: Prisma.SortOrder
  photo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
}

export type CandidateSumOrderByAggregateInput = {
  number?: Prisma.SortOrder
}

export type CandidateCreateNestedManyWithoutEventInput = {
  create?: Prisma.XOR<Prisma.CandidateCreateWithoutEventInput, Prisma.CandidateUncheckedCreateWithoutEventInput> | Prisma.CandidateCreateWithoutEventInput[] | Prisma.CandidateUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.CandidateCreateOrConnectWithoutEventInput | Prisma.CandidateCreateOrConnectWithoutEventInput[]
  createMany?: Prisma.CandidateCreateManyEventInputEnvelope
  connect?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
}

export type CandidateUncheckedCreateNestedManyWithoutEventInput = {
  create?: Prisma.XOR<Prisma.CandidateCreateWithoutEventInput, Prisma.CandidateUncheckedCreateWithoutEventInput> | Prisma.CandidateCreateWithoutEventInput[] | Prisma.CandidateUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.CandidateCreateOrConnectWithoutEventInput | Prisma.CandidateCreateOrConnectWithoutEventInput[]
  createMany?: Prisma.CandidateCreateManyEventInputEnvelope
  connect?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
}

export type CandidateUpdateManyWithoutEventNestedInput = {
  create?: Prisma.XOR<Prisma.CandidateCreateWithoutEventInput, Prisma.CandidateUncheckedCreateWithoutEventInput> | Prisma.CandidateCreateWithoutEventInput[] | Prisma.CandidateUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.CandidateCreateOrConnectWithoutEventInput | Prisma.CandidateCreateOrConnectWithoutEventInput[]
  upsert?: Prisma.CandidateUpsertWithWhereUniqueWithoutEventInput | Prisma.CandidateUpsertWithWhereUniqueWithoutEventInput[]
  createMany?: Prisma.CandidateCreateManyEventInputEnvelope
  set?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
  disconnect?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
  delete?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
  connect?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
  update?: Prisma.CandidateUpdateWithWhereUniqueWithoutEventInput | Prisma.CandidateUpdateWithWhereUniqueWithoutEventInput[]
  updateMany?: Prisma.CandidateUpdateManyWithWhereWithoutEventInput | Prisma.CandidateUpdateManyWithWhereWithoutEventInput[]
  deleteMany?: Prisma.CandidateScalarWhereInput | Prisma.CandidateScalarWhereInput[]
}

export type CandidateUncheckedUpdateManyWithoutEventNestedInput = {
  create?: Prisma.XOR<Prisma.CandidateCreateWithoutEventInput, Prisma.CandidateUncheckedCreateWithoutEventInput> | Prisma.CandidateCreateWithoutEventInput[] | Prisma.CandidateUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.CandidateCreateOrConnectWithoutEventInput | Prisma.CandidateCreateOrConnectWithoutEventInput[]
  upsert?: Prisma.CandidateUpsertWithWhereUniqueWithoutEventInput | Prisma.CandidateUpsertWithWhereUniqueWithoutEventInput[]
  createMany?: Prisma.CandidateCreateManyEventInputEnvelope
  set?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
  disconnect?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
  delete?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
  connect?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
  update?: Prisma.CandidateUpdateWithWhereUniqueWithoutEventInput | Prisma.CandidateUpdateWithWhereUniqueWithoutEventInput[]
  updateMany?: Prisma.CandidateUpdateManyWithWhereWithoutEventInput | Prisma.CandidateUpdateManyWithWhereWithoutEventInput[]
  deleteMany?: Prisma.CandidateScalarWhereInput | Prisma.CandidateScalarWhereInput[]
}

export type CandidateCreateNestedManyWithoutCompetitionsInput = {
  create?: Prisma.XOR<Prisma.CandidateCreateWithoutCompetitionsInput, Prisma.CandidateUncheckedCreateWithoutCompetitionsInput> | Prisma.CandidateCreateWithoutCompetitionsInput[] | Prisma.CandidateUncheckedCreateWithoutCompetitionsInput[]
  connectOrCreate?: Prisma.CandidateCreateOrConnectWithoutCompetitionsInput | Prisma.CandidateCreateOrConnectWithoutCompetitionsInput[]
  connect?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
}

export type CandidateUncheckedCreateNestedManyWithoutCompetitionsInput = {
  create?: Prisma.XOR<Prisma.CandidateCreateWithoutCompetitionsInput, Prisma.CandidateUncheckedCreateWithoutCompetitionsInput> | Prisma.CandidateCreateWithoutCompetitionsInput[] | Prisma.CandidateUncheckedCreateWithoutCompetitionsInput[]
  connectOrCreate?: Prisma.CandidateCreateOrConnectWithoutCompetitionsInput | Prisma.CandidateCreateOrConnectWithoutCompetitionsInput[]
  connect?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
}

export type CandidateUpdateManyWithoutCompetitionsNestedInput = {
  create?: Prisma.XOR<Prisma.CandidateCreateWithoutCompetitionsInput, Prisma.CandidateUncheckedCreateWithoutCompetitionsInput> | Prisma.CandidateCreateWithoutCompetitionsInput[] | Prisma.CandidateUncheckedCreateWithoutCompetitionsInput[]
  connectOrCreate?: Prisma.CandidateCreateOrConnectWithoutCompetitionsInput | Prisma.CandidateCreateOrConnectWithoutCompetitionsInput[]
  upsert?: Prisma.CandidateUpsertWithWhereUniqueWithoutCompetitionsInput | Prisma.CandidateUpsertWithWhereUniqueWithoutCompetitionsInput[]
  set?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
  disconnect?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
  delete?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
  connect?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
  update?: Prisma.CandidateUpdateWithWhereUniqueWithoutCompetitionsInput | Prisma.CandidateUpdateWithWhereUniqueWithoutCompetitionsInput[]
  updateMany?: Prisma.CandidateUpdateManyWithWhereWithoutCompetitionsInput | Prisma.CandidateUpdateManyWithWhereWithoutCompetitionsInput[]
  deleteMany?: Prisma.CandidateScalarWhereInput | Prisma.CandidateScalarWhereInput[]
}

export type CandidateUncheckedUpdateManyWithoutCompetitionsNestedInput = {
  create?: Prisma.XOR<Prisma.CandidateCreateWithoutCompetitionsInput, Prisma.CandidateUncheckedCreateWithoutCompetitionsInput> | Prisma.CandidateCreateWithoutCompetitionsInput[] | Prisma.CandidateUncheckedCreateWithoutCompetitionsInput[]
  connectOrCreate?: Prisma.CandidateCreateOrConnectWithoutCompetitionsInput | Prisma.CandidateCreateOrConnectWithoutCompetitionsInput[]
  upsert?: Prisma.CandidateUpsertWithWhereUniqueWithoutCompetitionsInput | Prisma.CandidateUpsertWithWhereUniqueWithoutCompetitionsInput[]
  set?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
  disconnect?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
  delete?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
  connect?: Prisma.CandidateWhereUniqueInput | Prisma.CandidateWhereUniqueInput[]
  update?: Prisma.CandidateUpdateWithWhereUniqueWithoutCompetitionsInput | Prisma.CandidateUpdateWithWhereUniqueWithoutCompetitionsInput[]
  updateMany?: Prisma.CandidateUpdateManyWithWhereWithoutCompetitionsInput | Prisma.CandidateUpdateManyWithWhereWithoutCompetitionsInput[]
  deleteMany?: Prisma.CandidateScalarWhereInput | Prisma.CandidateScalarWhereInput[]
}

export type CandidateCreateNestedOneWithoutScoresheetInput = {
  create?: Prisma.XOR<Prisma.CandidateCreateWithoutScoresheetInput, Prisma.CandidateUncheckedCreateWithoutScoresheetInput>
  connectOrCreate?: Prisma.CandidateCreateOrConnectWithoutScoresheetInput
  connect?: Prisma.CandidateWhereUniqueInput
}

export type CandidateUpdateOneRequiredWithoutScoresheetNestedInput = {
  create?: Prisma.XOR<Prisma.CandidateCreateWithoutScoresheetInput, Prisma.CandidateUncheckedCreateWithoutScoresheetInput>
  connectOrCreate?: Prisma.CandidateCreateOrConnectWithoutScoresheetInput
  upsert?: Prisma.CandidateUpsertWithoutScoresheetInput
  connect?: Prisma.CandidateWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CandidateUpdateToOneWithWhereWithoutScoresheetInput, Prisma.CandidateUpdateWithoutScoresheetInput>, Prisma.CandidateUncheckedUpdateWithoutScoresheetInput>
}

export type CandidateCreateWithoutEventInput = {
  id?: string
  fullName?: string
  number?: number
  course?: string
  photo?: string
  createdAt?: Date | string
  scoresheet?: Prisma.ScoresheetCreateNestedManyWithoutCandidateInput
  competitions?: Prisma.CompetitionCreateNestedManyWithoutCandidatesInput
}

export type CandidateUncheckedCreateWithoutEventInput = {
  id?: string
  fullName?: string
  number?: number
  course?: string
  photo?: string
  createdAt?: Date | string
  scoresheet?: Prisma.ScoresheetUncheckedCreateNestedManyWithoutCandidateInput
  competitions?: Prisma.CompetitionUncheckedCreateNestedManyWithoutCandidatesInput
}

export type CandidateCreateOrConnectWithoutEventInput = {
  where: Prisma.CandidateWhereUniqueInput
  create: Prisma.XOR<Prisma.CandidateCreateWithoutEventInput, Prisma.CandidateUncheckedCreateWithoutEventInput>
}

export type CandidateCreateManyEventInputEnvelope = {
  data: Prisma.CandidateCreateManyEventInput | Prisma.CandidateCreateManyEventInput[]
  skipDuplicates?: boolean
}

export type CandidateUpsertWithWhereUniqueWithoutEventInput = {
  where: Prisma.CandidateWhereUniqueInput
  update: Prisma.XOR<Prisma.CandidateUpdateWithoutEventInput, Prisma.CandidateUncheckedUpdateWithoutEventInput>
  create: Prisma.XOR<Prisma.CandidateCreateWithoutEventInput, Prisma.CandidateUncheckedCreateWithoutEventInput>
}

export type CandidateUpdateWithWhereUniqueWithoutEventInput = {
  where: Prisma.CandidateWhereUniqueInput
  data: Prisma.XOR<Prisma.CandidateUpdateWithoutEventInput, Prisma.CandidateUncheckedUpdateWithoutEventInput>
}

export type CandidateUpdateManyWithWhereWithoutEventInput = {
  where: Prisma.CandidateScalarWhereInput
  data: Prisma.XOR<Prisma.CandidateUpdateManyMutationInput, Prisma.CandidateUncheckedUpdateManyWithoutEventInput>
}

export type CandidateScalarWhereInput = {
  AND?: Prisma.CandidateScalarWhereInput | Prisma.CandidateScalarWhereInput[]
  OR?: Prisma.CandidateScalarWhereInput[]
  NOT?: Prisma.CandidateScalarWhereInput | Prisma.CandidateScalarWhereInput[]
  id?: Prisma.StringFilter<"Candidate"> | string
  fullName?: Prisma.StringFilter<"Candidate"> | string
  number?: Prisma.IntFilter<"Candidate"> | number
  course?: Prisma.StringFilter<"Candidate"> | string
  photo?: Prisma.StringFilter<"Candidate"> | string
  createdAt?: Prisma.DateTimeFilter<"Candidate"> | Date | string
  eventId?: Prisma.StringFilter<"Candidate"> | string
}

export type CandidateCreateWithoutCompetitionsInput = {
  id?: string
  fullName?: string
  number?: number
  course?: string
  photo?: string
  createdAt?: Date | string
  event: Prisma.EventCreateNestedOneWithoutCandidatesInput
  scoresheet?: Prisma.ScoresheetCreateNestedManyWithoutCandidateInput
}

export type CandidateUncheckedCreateWithoutCompetitionsInput = {
  id?: string
  fullName?: string
  number?: number
  course?: string
  photo?: string
  createdAt?: Date | string
  eventId: string
  scoresheet?: Prisma.ScoresheetUncheckedCreateNestedManyWithoutCandidateInput
}

export type CandidateCreateOrConnectWithoutCompetitionsInput = {
  where: Prisma.CandidateWhereUniqueInput
  create: Prisma.XOR<Prisma.CandidateCreateWithoutCompetitionsInput, Prisma.CandidateUncheckedCreateWithoutCompetitionsInput>
}

export type CandidateUpsertWithWhereUniqueWithoutCompetitionsInput = {
  where: Prisma.CandidateWhereUniqueInput
  update: Prisma.XOR<Prisma.CandidateUpdateWithoutCompetitionsInput, Prisma.CandidateUncheckedUpdateWithoutCompetitionsInput>
  create: Prisma.XOR<Prisma.CandidateCreateWithoutCompetitionsInput, Prisma.CandidateUncheckedCreateWithoutCompetitionsInput>
}

export type CandidateUpdateWithWhereUniqueWithoutCompetitionsInput = {
  where: Prisma.CandidateWhereUniqueInput
  data: Prisma.XOR<Prisma.CandidateUpdateWithoutCompetitionsInput, Prisma.CandidateUncheckedUpdateWithoutCompetitionsInput>
}

export type CandidateUpdateManyWithWhereWithoutCompetitionsInput = {
  where: Prisma.CandidateScalarWhereInput
  data: Prisma.XOR<Prisma.CandidateUpdateManyMutationInput, Prisma.CandidateUncheckedUpdateManyWithoutCompetitionsInput>
}

export type CandidateCreateWithoutScoresheetInput = {
  id?: string
  fullName?: string
  number?: number
  course?: string
  photo?: string
  createdAt?: Date | string
  event: Prisma.EventCreateNestedOneWithoutCandidatesInput
  competitions?: Prisma.CompetitionCreateNestedManyWithoutCandidatesInput
}

export type CandidateUncheckedCreateWithoutScoresheetInput = {
  id?: string
  fullName?: string
  number?: number
  course?: string
  photo?: string
  createdAt?: Date | string
  eventId: string
  competitions?: Prisma.CompetitionUncheckedCreateNestedManyWithoutCandidatesInput
}

export type CandidateCreateOrConnectWithoutScoresheetInput = {
  where: Prisma.CandidateWhereUniqueInput
  create: Prisma.XOR<Prisma.CandidateCreateWithoutScoresheetInput, Prisma.CandidateUncheckedCreateWithoutScoresheetInput>
}

export type CandidateUpsertWithoutScoresheetInput = {
  update: Prisma.XOR<Prisma.CandidateUpdateWithoutScoresheetInput, Prisma.CandidateUncheckedUpdateWithoutScoresheetInput>
  create: Prisma.XOR<Prisma.CandidateCreateWithoutScoresheetInput, Prisma.CandidateUncheckedCreateWithoutScoresheetInput>
  where?: Prisma.CandidateWhereInput
}

export type CandidateUpdateToOneWithWhereWithoutScoresheetInput = {
  where?: Prisma.CandidateWhereInput
  data: Prisma.XOR<Prisma.CandidateUpdateWithoutScoresheetInput, Prisma.CandidateUncheckedUpdateWithoutScoresheetInput>
}

export type CandidateUpdateWithoutScoresheetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  course?: Prisma.StringFieldUpdateOperationsInput | string
  photo?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  event?: Prisma.EventUpdateOneRequiredWithoutCandidatesNestedInput
  competitions?: Prisma.CompetitionUpdateManyWithoutCandidatesNestedInput
}

export type CandidateUncheckedUpdateWithoutScoresheetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  course?: Prisma.StringFieldUpdateOperationsInput | string
  photo?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  competitions?: Prisma.CompetitionUncheckedUpdateManyWithoutCandidatesNestedInput
}

export type CandidateCreateManyEventInput = {
  id?: string
  fullName?: string
  number?: number
  course?: string
  photo?: string
  createdAt?: Date | string
}

export type CandidateUpdateWithoutEventInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  course?: Prisma.StringFieldUpdateOperationsInput | string
  photo?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scoresheet?: Prisma.ScoresheetUpdateManyWithoutCandidateNestedInput
  competitions?: Prisma.CompetitionUpdateManyWithoutCandidatesNestedInput
}

export type CandidateUncheckedUpdateWithoutEventInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  course?: Prisma.StringFieldUpdateOperationsInput | string
  photo?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scoresheet?: Prisma.ScoresheetUncheckedUpdateManyWithoutCandidateNestedInput
  competitions?: Prisma.CompetitionUncheckedUpdateManyWithoutCandidatesNestedInput
}

export type CandidateUncheckedUpdateManyWithoutEventInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  course?: Prisma.StringFieldUpdateOperationsInput | string
  photo?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CandidateUpdateWithoutCompetitionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  course?: Prisma.StringFieldUpdateOperationsInput | string
  photo?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  event?: Prisma.EventUpdateOneRequiredWithoutCandidatesNestedInput
  scoresheet?: Prisma.ScoresheetUpdateManyWithoutCandidateNestedInput
}

export type CandidateUncheckedUpdateWithoutCompetitionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  course?: Prisma.StringFieldUpdateOperationsInput | string
  photo?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  scoresheet?: Prisma.ScoresheetUncheckedUpdateManyWithoutCandidateNestedInput
}

export type CandidateUncheckedUpdateManyWithoutCompetitionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.IntFieldUpdateOperationsInput | number
  course?: Prisma.StringFieldUpdateOperationsInput | string
  photo?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type CandidateCountOutputType
 */

export type CandidateCountOutputType = {
  scoresheet: number
  competitions: number
}

export type CandidateCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  scoresheet?: boolean | CandidateCountOutputTypeCountScoresheetArgs
  competitions?: boolean | CandidateCountOutputTypeCountCompetitionsArgs
}

/**
 * CandidateCountOutputType without action
 */
export type CandidateCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CandidateCountOutputType
   */
  select?: Prisma.CandidateCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CandidateCountOutputType without action
 */
export type CandidateCountOutputTypeCountScoresheetArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ScoresheetWhereInput
}

/**
 * CandidateCountOutputType without action
 */
export type CandidateCountOutputTypeCountCompetitionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CompetitionWhereInput
}


export type CandidateSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fullName?: boolean
  number?: boolean
  course?: boolean
  photo?: boolean
  createdAt?: boolean
  eventId?: boolean
  event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
  scoresheet?: boolean | Prisma.Candidate$scoresheetArgs<ExtArgs>
  competitions?: boolean | Prisma.Candidate$competitionsArgs<ExtArgs>
  _count?: boolean | Prisma.CandidateCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["candidate"]>

export type CandidateSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fullName?: boolean
  number?: boolean
  course?: boolean
  photo?: boolean
  createdAt?: boolean
  eventId?: boolean
  event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}, ExtArgs["result"]["candidate"]>

export type CandidateSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fullName?: boolean
  number?: boolean
  course?: boolean
  photo?: boolean
  createdAt?: boolean
  eventId?: boolean
  event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}, ExtArgs["result"]["candidate"]>

export type CandidateSelectScalar = {
  id?: boolean
  fullName?: boolean
  number?: boolean
  course?: boolean
  photo?: boolean
  createdAt?: boolean
  eventId?: boolean
}

export type CandidateOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "fullName" | "number" | "course" | "photo" | "createdAt" | "eventId", ExtArgs["result"]["candidate"]>
export type CandidateInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
  scoresheet?: boolean | Prisma.Candidate$scoresheetArgs<ExtArgs>
  competitions?: boolean | Prisma.Candidate$competitionsArgs<ExtArgs>
  _count?: boolean | Prisma.CandidateCountOutputTypeDefaultArgs<ExtArgs>
}
export type CandidateIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}
export type CandidateIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}

export type $CandidatePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Candidate"
  objects: {
    event: Prisma.$EventPayload<ExtArgs>
    scoresheet: Prisma.$ScoresheetPayload<ExtArgs>[]
    competitions: Prisma.$CompetitionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    fullName: string
    number: number
    course: string
    photo: string
    createdAt: Date
    eventId: string
  }, ExtArgs["result"]["candidate"]>
  composites: {}
}

export type CandidateGetPayload<S extends boolean | null | undefined | CandidateDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CandidatePayload, S>

export type CandidateCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CandidateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CandidateCountAggregateInputType | true
  }

export interface CandidateDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Candidate'], meta: { name: 'Candidate' } }
  /**
   * Find zero or one Candidate that matches the filter.
   * @param {CandidateFindUniqueArgs} args - Arguments to find a Candidate
   * @example
   * // Get one Candidate
   * const candidate = await prisma.candidate.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CandidateFindUniqueArgs>(args: Prisma.SelectSubset<T, CandidateFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CandidateClient<runtime.Types.Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Candidate that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CandidateFindUniqueOrThrowArgs} args - Arguments to find a Candidate
   * @example
   * // Get one Candidate
   * const candidate = await prisma.candidate.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CandidateFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CandidateFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CandidateClient<runtime.Types.Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Candidate that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CandidateFindFirstArgs} args - Arguments to find a Candidate
   * @example
   * // Get one Candidate
   * const candidate = await prisma.candidate.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CandidateFindFirstArgs>(args?: Prisma.SelectSubset<T, CandidateFindFirstArgs<ExtArgs>>): Prisma.Prisma__CandidateClient<runtime.Types.Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Candidate that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CandidateFindFirstOrThrowArgs} args - Arguments to find a Candidate
   * @example
   * // Get one Candidate
   * const candidate = await prisma.candidate.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CandidateFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CandidateFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CandidateClient<runtime.Types.Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Candidates that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CandidateFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Candidates
   * const candidates = await prisma.candidate.findMany()
   * 
   * // Get first 10 Candidates
   * const candidates = await prisma.candidate.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const candidateWithIdOnly = await prisma.candidate.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CandidateFindManyArgs>(args?: Prisma.SelectSubset<T, CandidateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Candidate.
   * @param {CandidateCreateArgs} args - Arguments to create a Candidate.
   * @example
   * // Create one Candidate
   * const Candidate = await prisma.candidate.create({
   *   data: {
   *     // ... data to create a Candidate
   *   }
   * })
   * 
   */
  create<T extends CandidateCreateArgs>(args: Prisma.SelectSubset<T, CandidateCreateArgs<ExtArgs>>): Prisma.Prisma__CandidateClient<runtime.Types.Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Candidates.
   * @param {CandidateCreateManyArgs} args - Arguments to create many Candidates.
   * @example
   * // Create many Candidates
   * const candidate = await prisma.candidate.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CandidateCreateManyArgs>(args?: Prisma.SelectSubset<T, CandidateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Candidates and returns the data saved in the database.
   * @param {CandidateCreateManyAndReturnArgs} args - Arguments to create many Candidates.
   * @example
   * // Create many Candidates
   * const candidate = await prisma.candidate.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Candidates and only return the `id`
   * const candidateWithIdOnly = await prisma.candidate.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CandidateCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CandidateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Candidate.
   * @param {CandidateDeleteArgs} args - Arguments to delete one Candidate.
   * @example
   * // Delete one Candidate
   * const Candidate = await prisma.candidate.delete({
   *   where: {
   *     // ... filter to delete one Candidate
   *   }
   * })
   * 
   */
  delete<T extends CandidateDeleteArgs>(args: Prisma.SelectSubset<T, CandidateDeleteArgs<ExtArgs>>): Prisma.Prisma__CandidateClient<runtime.Types.Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Candidate.
   * @param {CandidateUpdateArgs} args - Arguments to update one Candidate.
   * @example
   * // Update one Candidate
   * const candidate = await prisma.candidate.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CandidateUpdateArgs>(args: Prisma.SelectSubset<T, CandidateUpdateArgs<ExtArgs>>): Prisma.Prisma__CandidateClient<runtime.Types.Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Candidates.
   * @param {CandidateDeleteManyArgs} args - Arguments to filter Candidates to delete.
   * @example
   * // Delete a few Candidates
   * const { count } = await prisma.candidate.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CandidateDeleteManyArgs>(args?: Prisma.SelectSubset<T, CandidateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Candidates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CandidateUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Candidates
   * const candidate = await prisma.candidate.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CandidateUpdateManyArgs>(args: Prisma.SelectSubset<T, CandidateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Candidates and returns the data updated in the database.
   * @param {CandidateUpdateManyAndReturnArgs} args - Arguments to update many Candidates.
   * @example
   * // Update many Candidates
   * const candidate = await prisma.candidate.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Candidates and only return the `id`
   * const candidateWithIdOnly = await prisma.candidate.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CandidateUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CandidateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Candidate.
   * @param {CandidateUpsertArgs} args - Arguments to update or create a Candidate.
   * @example
   * // Update or create a Candidate
   * const candidate = await prisma.candidate.upsert({
   *   create: {
   *     // ... data to create a Candidate
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Candidate we want to update
   *   }
   * })
   */
  upsert<T extends CandidateUpsertArgs>(args: Prisma.SelectSubset<T, CandidateUpsertArgs<ExtArgs>>): Prisma.Prisma__CandidateClient<runtime.Types.Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Candidates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CandidateCountArgs} args - Arguments to filter Candidates to count.
   * @example
   * // Count the number of Candidates
   * const count = await prisma.candidate.count({
   *   where: {
   *     // ... the filter for the Candidates we want to count
   *   }
   * })
  **/
  count<T extends CandidateCountArgs>(
    args?: Prisma.Subset<T, CandidateCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CandidateCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Candidate.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CandidateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CandidateAggregateArgs>(args: Prisma.Subset<T, CandidateAggregateArgs>): Prisma.PrismaPromise<GetCandidateAggregateType<T>>

  /**
   * Group by Candidate.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CandidateGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CandidateGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CandidateGroupByArgs['orderBy'] }
      : { orderBy?: CandidateGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CandidateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Candidate model
 */
readonly fields: CandidateFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Candidate.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CandidateClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  event<T extends Prisma.EventDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EventDefaultArgs<ExtArgs>>): Prisma.Prisma__EventClient<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  scoresheet<T extends Prisma.Candidate$scoresheetArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Candidate$scoresheetArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScoresheetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  competitions<T extends Prisma.Candidate$competitionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Candidate$competitionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Candidate model
 */
export interface CandidateFieldRefs {
  readonly id: Prisma.FieldRef<"Candidate", 'String'>
  readonly fullName: Prisma.FieldRef<"Candidate", 'String'>
  readonly number: Prisma.FieldRef<"Candidate", 'Int'>
  readonly course: Prisma.FieldRef<"Candidate", 'String'>
  readonly photo: Prisma.FieldRef<"Candidate", 'String'>
  readonly createdAt: Prisma.FieldRef<"Candidate", 'DateTime'>
  readonly eventId: Prisma.FieldRef<"Candidate", 'String'>
}
    

// Custom InputTypes
/**
 * Candidate findUnique
 */
export type CandidateFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Candidate
   */
  select?: Prisma.CandidateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Candidate
   */
  omit?: Prisma.CandidateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CandidateInclude<ExtArgs> | null
  /**
   * Filter, which Candidate to fetch.
   */
  where: Prisma.CandidateWhereUniqueInput
}

/**
 * Candidate findUniqueOrThrow
 */
export type CandidateFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Candidate
   */
  select?: Prisma.CandidateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Candidate
   */
  omit?: Prisma.CandidateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CandidateInclude<ExtArgs> | null
  /**
   * Filter, which Candidate to fetch.
   */
  where: Prisma.CandidateWhereUniqueInput
}

/**
 * Candidate findFirst
 */
export type CandidateFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Candidate
   */
  select?: Prisma.CandidateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Candidate
   */
  omit?: Prisma.CandidateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CandidateInclude<ExtArgs> | null
  /**
   * Filter, which Candidate to fetch.
   */
  where?: Prisma.CandidateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Candidates to fetch.
   */
  orderBy?: Prisma.CandidateOrderByWithRelationInput | Prisma.CandidateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Candidates.
   */
  cursor?: Prisma.CandidateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Candidates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Candidates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Candidates.
   */
  distinct?: Prisma.CandidateScalarFieldEnum | Prisma.CandidateScalarFieldEnum[]
}

/**
 * Candidate findFirstOrThrow
 */
export type CandidateFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Candidate
   */
  select?: Prisma.CandidateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Candidate
   */
  omit?: Prisma.CandidateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CandidateInclude<ExtArgs> | null
  /**
   * Filter, which Candidate to fetch.
   */
  where?: Prisma.CandidateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Candidates to fetch.
   */
  orderBy?: Prisma.CandidateOrderByWithRelationInput | Prisma.CandidateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Candidates.
   */
  cursor?: Prisma.CandidateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Candidates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Candidates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Candidates.
   */
  distinct?: Prisma.CandidateScalarFieldEnum | Prisma.CandidateScalarFieldEnum[]
}

/**
 * Candidate findMany
 */
export type CandidateFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Candidate
   */
  select?: Prisma.CandidateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Candidate
   */
  omit?: Prisma.CandidateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CandidateInclude<ExtArgs> | null
  /**
   * Filter, which Candidates to fetch.
   */
  where?: Prisma.CandidateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Candidates to fetch.
   */
  orderBy?: Prisma.CandidateOrderByWithRelationInput | Prisma.CandidateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Candidates.
   */
  cursor?: Prisma.CandidateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Candidates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Candidates.
   */
  skip?: number
  distinct?: Prisma.CandidateScalarFieldEnum | Prisma.CandidateScalarFieldEnum[]
}

/**
 * Candidate create
 */
export type CandidateCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Candidate
   */
  select?: Prisma.CandidateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Candidate
   */
  omit?: Prisma.CandidateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CandidateInclude<ExtArgs> | null
  /**
   * The data needed to create a Candidate.
   */
  data: Prisma.XOR<Prisma.CandidateCreateInput, Prisma.CandidateUncheckedCreateInput>
}

/**
 * Candidate createMany
 */
export type CandidateCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Candidates.
   */
  data: Prisma.CandidateCreateManyInput | Prisma.CandidateCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Candidate createManyAndReturn
 */
export type CandidateCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Candidate
   */
  select?: Prisma.CandidateSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Candidate
   */
  omit?: Prisma.CandidateOmit<ExtArgs> | null
  /**
   * The data used to create many Candidates.
   */
  data: Prisma.CandidateCreateManyInput | Prisma.CandidateCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CandidateIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Candidate update
 */
export type CandidateUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Candidate
   */
  select?: Prisma.CandidateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Candidate
   */
  omit?: Prisma.CandidateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CandidateInclude<ExtArgs> | null
  /**
   * The data needed to update a Candidate.
   */
  data: Prisma.XOR<Prisma.CandidateUpdateInput, Prisma.CandidateUncheckedUpdateInput>
  /**
   * Choose, which Candidate to update.
   */
  where: Prisma.CandidateWhereUniqueInput
}

/**
 * Candidate updateMany
 */
export type CandidateUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Candidates.
   */
  data: Prisma.XOR<Prisma.CandidateUpdateManyMutationInput, Prisma.CandidateUncheckedUpdateManyInput>
  /**
   * Filter which Candidates to update
   */
  where?: Prisma.CandidateWhereInput
  /**
   * Limit how many Candidates to update.
   */
  limit?: number
}

/**
 * Candidate updateManyAndReturn
 */
export type CandidateUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Candidate
   */
  select?: Prisma.CandidateSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Candidate
   */
  omit?: Prisma.CandidateOmit<ExtArgs> | null
  /**
   * The data used to update Candidates.
   */
  data: Prisma.XOR<Prisma.CandidateUpdateManyMutationInput, Prisma.CandidateUncheckedUpdateManyInput>
  /**
   * Filter which Candidates to update
   */
  where?: Prisma.CandidateWhereInput
  /**
   * Limit how many Candidates to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CandidateIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Candidate upsert
 */
export type CandidateUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Candidate
   */
  select?: Prisma.CandidateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Candidate
   */
  omit?: Prisma.CandidateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CandidateInclude<ExtArgs> | null
  /**
   * The filter to search for the Candidate to update in case it exists.
   */
  where: Prisma.CandidateWhereUniqueInput
  /**
   * In case the Candidate found by the `where` argument doesn't exist, create a new Candidate with this data.
   */
  create: Prisma.XOR<Prisma.CandidateCreateInput, Prisma.CandidateUncheckedCreateInput>
  /**
   * In case the Candidate was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CandidateUpdateInput, Prisma.CandidateUncheckedUpdateInput>
}

/**
 * Candidate delete
 */
export type CandidateDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Candidate
   */
  select?: Prisma.CandidateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Candidate
   */
  omit?: Prisma.CandidateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CandidateInclude<ExtArgs> | null
  /**
   * Filter which Candidate to delete.
   */
  where: Prisma.CandidateWhereUniqueInput
}

/**
 * Candidate deleteMany
 */
export type CandidateDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Candidates to delete
   */
  where?: Prisma.CandidateWhereInput
  /**
   * Limit how many Candidates to delete.
   */
  limit?: number
}

/**
 * Candidate.scoresheet
 */
export type Candidate$scoresheetArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scoresheet
   */
  select?: Prisma.ScoresheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scoresheet
   */
  omit?: Prisma.ScoresheetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScoresheetInclude<ExtArgs> | null
  where?: Prisma.ScoresheetWhereInput
  orderBy?: Prisma.ScoresheetOrderByWithRelationInput | Prisma.ScoresheetOrderByWithRelationInput[]
  cursor?: Prisma.ScoresheetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ScoresheetScalarFieldEnum | Prisma.ScoresheetScalarFieldEnum[]
}

/**
 * Candidate.competitions
 */
export type Candidate$competitionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Competition
   */
  select?: Prisma.CompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Competition
   */
  omit?: Prisma.CompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitionInclude<ExtArgs> | null
  where?: Prisma.CompetitionWhereInput
  orderBy?: Prisma.CompetitionOrderByWithRelationInput | Prisma.CompetitionOrderByWithRelationInput[]
  cursor?: Prisma.CompetitionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CompetitionScalarFieldEnum | Prisma.CompetitionScalarFieldEnum[]
}

/**
 * Candidate without action
 */
export type CandidateDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Candidate
   */
  select?: Prisma.CandidateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Candidate
   */
  omit?: Prisma.CandidateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CandidateInclude<ExtArgs> | null
}
