
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Event` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Event
 * 
 */
export type EventModel = runtime.Types.Result.DefaultSelection<Prisma.$EventPayload>

export type AggregateEvent = {
  _count: EventCountAggregateOutputType | null
  _min: EventMinAggregateOutputType | null
  _max: EventMaxAggregateOutputType | null
}

export type EventMinAggregateOutputType = {
  id: string | null
  name: string | null
  eventDate: Date | null
  isActive: boolean | null
  createdAt: Date | null
}

export type EventMaxAggregateOutputType = {
  id: string | null
  name: string | null
  eventDate: Date | null
  isActive: boolean | null
  createdAt: Date | null
}

export type EventCountAggregateOutputType = {
  id: number
  name: number
  eventDate: number
  isActive: number
  createdAt: number
  _all: number
}


export type EventMinAggregateInputType = {
  id?: true
  name?: true
  eventDate?: true
  isActive?: true
  createdAt?: true
}

export type EventMaxAggregateInputType = {
  id?: true
  name?: true
  eventDate?: true
  isActive?: true
  createdAt?: true
}

export type EventCountAggregateInputType = {
  id?: true
  name?: true
  eventDate?: true
  isActive?: true
  createdAt?: true
  _all?: true
}

export type EventAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Event to aggregate.
   */
  where?: Prisma.EventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Events to fetch.
   */
  orderBy?: Prisma.EventOrderByWithRelationInput | Prisma.EventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Events from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Events.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Events
  **/
  _count?: true | EventCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EventMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EventMaxAggregateInputType
}

export type GetEventAggregateType<T extends EventAggregateArgs> = {
      [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEvent[P]>
    : Prisma.GetScalarType<T[P], AggregateEvent[P]>
}




export type EventGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EventWhereInput
  orderBy?: Prisma.EventOrderByWithAggregationInput | Prisma.EventOrderByWithAggregationInput[]
  by: Prisma.EventScalarFieldEnum[] | Prisma.EventScalarFieldEnum
  having?: Prisma.EventScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EventCountAggregateInputType | true
  _min?: EventMinAggregateInputType
  _max?: EventMaxAggregateInputType
}

export type EventGroupByOutputType = {
  id: string
  name: string
  eventDate: Date
  isActive: boolean
  createdAt: Date
  _count: EventCountAggregateOutputType | null
  _min: EventMinAggregateOutputType | null
  _max: EventMaxAggregateOutputType | null
}

type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EventGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EventGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EventGroupByOutputType[P]>
      }
    >
  > 



export type EventWhereInput = {
  AND?: Prisma.EventWhereInput | Prisma.EventWhereInput[]
  OR?: Prisma.EventWhereInput[]
  NOT?: Prisma.EventWhereInput | Prisma.EventWhereInput[]
  id?: Prisma.StringFilter<"Event"> | string
  name?: Prisma.StringFilter<"Event"> | string
  eventDate?: Prisma.DateTimeFilter<"Event"> | Date | string
  isActive?: Prisma.BoolFilter<"Event"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Event"> | Date | string
  candidates?: Prisma.CandidateListRelationFilter
  competitions?: Prisma.CompetitionListRelationFilter
  user?: Prisma.UserListRelationFilter
}

export type EventOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  eventDate?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  candidates?: Prisma.CandidateOrderByRelationAggregateInput
  competitions?: Prisma.CompetitionOrderByRelationAggregateInput
  user?: Prisma.UserOrderByRelationAggregateInput
}

export type EventWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.EventWhereInput | Prisma.EventWhereInput[]
  OR?: Prisma.EventWhereInput[]
  NOT?: Prisma.EventWhereInput | Prisma.EventWhereInput[]
  eventDate?: Prisma.DateTimeFilter<"Event"> | Date | string
  isActive?: Prisma.BoolFilter<"Event"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Event"> | Date | string
  candidates?: Prisma.CandidateListRelationFilter
  competitions?: Prisma.CompetitionListRelationFilter
  user?: Prisma.UserListRelationFilter
}, "id" | "name">

export type EventOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  eventDate?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.EventCountOrderByAggregateInput
  _max?: Prisma.EventMaxOrderByAggregateInput
  _min?: Prisma.EventMinOrderByAggregateInput
}

export type EventScalarWhereWithAggregatesInput = {
  AND?: Prisma.EventScalarWhereWithAggregatesInput | Prisma.EventScalarWhereWithAggregatesInput[]
  OR?: Prisma.EventScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EventScalarWhereWithAggregatesInput | Prisma.EventScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Event"> | string
  name?: Prisma.StringWithAggregatesFilter<"Event"> | string
  eventDate?: Prisma.DateTimeWithAggregatesFilter<"Event"> | Date | string
  isActive?: Prisma.BoolWithAggregatesFilter<"Event"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Event"> | Date | string
}

export type EventCreateInput = {
  id?: string
  name: string
  eventDate?: Date | string
  isActive?: boolean
  createdAt?: Date | string
  candidates?: Prisma.CandidateCreateNestedManyWithoutEventInput
  competitions?: Prisma.CompetitionCreateNestedManyWithoutEventInput
  user?: Prisma.UserCreateNestedManyWithoutEventInput
}

export type EventUncheckedCreateInput = {
  id?: string
  name: string
  eventDate?: Date | string
  isActive?: boolean
  createdAt?: Date | string
  candidates?: Prisma.CandidateUncheckedCreateNestedManyWithoutEventInput
  competitions?: Prisma.CompetitionUncheckedCreateNestedManyWithoutEventInput
  user?: Prisma.UserUncheckedCreateNestedManyWithoutEventInput
}

export type EventUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  candidates?: Prisma.CandidateUpdateManyWithoutEventNestedInput
  competitions?: Prisma.CompetitionUpdateManyWithoutEventNestedInput
  user?: Prisma.UserUpdateManyWithoutEventNestedInput
}

export type EventUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  candidates?: Prisma.CandidateUncheckedUpdateManyWithoutEventNestedInput
  competitions?: Prisma.CompetitionUncheckedUpdateManyWithoutEventNestedInput
  user?: Prisma.UserUncheckedUpdateManyWithoutEventNestedInput
}

export type EventCreateManyInput = {
  id?: string
  name: string
  eventDate?: Date | string
  isActive?: boolean
  createdAt?: Date | string
}

export type EventUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventNullableScalarRelationFilter = {
  is?: Prisma.EventWhereInput | null
  isNot?: Prisma.EventWhereInput | null
}

export type EventCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  eventDate?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type EventMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  eventDate?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type EventMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  eventDate?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type EventScalarRelationFilter = {
  is?: Prisma.EventWhereInput
  isNot?: Prisma.EventWhereInput
}

export type EventCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.EventCreateWithoutUserInput, Prisma.EventUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.EventCreateOrConnectWithoutUserInput
  connect?: Prisma.EventWhereUniqueInput
}

export type EventUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.EventCreateWithoutUserInput, Prisma.EventUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.EventCreateOrConnectWithoutUserInput
  upsert?: Prisma.EventUpsertWithoutUserInput
  disconnect?: Prisma.EventWhereInput | boolean
  delete?: Prisma.EventWhereInput | boolean
  connect?: Prisma.EventWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EventUpdateToOneWithWhereWithoutUserInput, Prisma.EventUpdateWithoutUserInput>, Prisma.EventUncheckedUpdateWithoutUserInput>
}

export type EventCreateNestedOneWithoutCompetitionsInput = {
  create?: Prisma.XOR<Prisma.EventCreateWithoutCompetitionsInput, Prisma.EventUncheckedCreateWithoutCompetitionsInput>
  connectOrCreate?: Prisma.EventCreateOrConnectWithoutCompetitionsInput
  connect?: Prisma.EventWhereUniqueInput
}

export type EventUpdateOneRequiredWithoutCompetitionsNestedInput = {
  create?: Prisma.XOR<Prisma.EventCreateWithoutCompetitionsInput, Prisma.EventUncheckedCreateWithoutCompetitionsInput>
  connectOrCreate?: Prisma.EventCreateOrConnectWithoutCompetitionsInput
  upsert?: Prisma.EventUpsertWithoutCompetitionsInput
  connect?: Prisma.EventWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EventUpdateToOneWithWhereWithoutCompetitionsInput, Prisma.EventUpdateWithoutCompetitionsInput>, Prisma.EventUncheckedUpdateWithoutCompetitionsInput>
}

export type EventCreateNestedOneWithoutCandidatesInput = {
  create?: Prisma.XOR<Prisma.EventCreateWithoutCandidatesInput, Prisma.EventUncheckedCreateWithoutCandidatesInput>
  connectOrCreate?: Prisma.EventCreateOrConnectWithoutCandidatesInput
  connect?: Prisma.EventWhereUniqueInput
}

export type EventUpdateOneRequiredWithoutCandidatesNestedInput = {
  create?: Prisma.XOR<Prisma.EventCreateWithoutCandidatesInput, Prisma.EventUncheckedCreateWithoutCandidatesInput>
  connectOrCreate?: Prisma.EventCreateOrConnectWithoutCandidatesInput
  upsert?: Prisma.EventUpsertWithoutCandidatesInput
  connect?: Prisma.EventWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EventUpdateToOneWithWhereWithoutCandidatesInput, Prisma.EventUpdateWithoutCandidatesInput>, Prisma.EventUncheckedUpdateWithoutCandidatesInput>
}

export type EventCreateWithoutUserInput = {
  id?: string
  name: string
  eventDate?: Date | string
  isActive?: boolean
  createdAt?: Date | string
  candidates?: Prisma.CandidateCreateNestedManyWithoutEventInput
  competitions?: Prisma.CompetitionCreateNestedManyWithoutEventInput
}

export type EventUncheckedCreateWithoutUserInput = {
  id?: string
  name: string
  eventDate?: Date | string
  isActive?: boolean
  createdAt?: Date | string
  candidates?: Prisma.CandidateUncheckedCreateNestedManyWithoutEventInput
  competitions?: Prisma.CompetitionUncheckedCreateNestedManyWithoutEventInput
}

export type EventCreateOrConnectWithoutUserInput = {
  where: Prisma.EventWhereUniqueInput
  create: Prisma.XOR<Prisma.EventCreateWithoutUserInput, Prisma.EventUncheckedCreateWithoutUserInput>
}

export type EventUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.EventUpdateWithoutUserInput, Prisma.EventUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.EventCreateWithoutUserInput, Prisma.EventUncheckedCreateWithoutUserInput>
  where?: Prisma.EventWhereInput
}

export type EventUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.EventWhereInput
  data: Prisma.XOR<Prisma.EventUpdateWithoutUserInput, Prisma.EventUncheckedUpdateWithoutUserInput>
}

export type EventUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  candidates?: Prisma.CandidateUpdateManyWithoutEventNestedInput
  competitions?: Prisma.CompetitionUpdateManyWithoutEventNestedInput
}

export type EventUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  candidates?: Prisma.CandidateUncheckedUpdateManyWithoutEventNestedInput
  competitions?: Prisma.CompetitionUncheckedUpdateManyWithoutEventNestedInput
}

export type EventCreateWithoutCompetitionsInput = {
  id?: string
  name: string
  eventDate?: Date | string
  isActive?: boolean
  createdAt?: Date | string
  candidates?: Prisma.CandidateCreateNestedManyWithoutEventInput
  user?: Prisma.UserCreateNestedManyWithoutEventInput
}

export type EventUncheckedCreateWithoutCompetitionsInput = {
  id?: string
  name: string
  eventDate?: Date | string
  isActive?: boolean
  createdAt?: Date | string
  candidates?: Prisma.CandidateUncheckedCreateNestedManyWithoutEventInput
  user?: Prisma.UserUncheckedCreateNestedManyWithoutEventInput
}

export type EventCreateOrConnectWithoutCompetitionsInput = {
  where: Prisma.EventWhereUniqueInput
  create: Prisma.XOR<Prisma.EventCreateWithoutCompetitionsInput, Prisma.EventUncheckedCreateWithoutCompetitionsInput>
}

export type EventUpsertWithoutCompetitionsInput = {
  update: Prisma.XOR<Prisma.EventUpdateWithoutCompetitionsInput, Prisma.EventUncheckedUpdateWithoutCompetitionsInput>
  create: Prisma.XOR<Prisma.EventCreateWithoutCompetitionsInput, Prisma.EventUncheckedCreateWithoutCompetitionsInput>
  where?: Prisma.EventWhereInput
}

export type EventUpdateToOneWithWhereWithoutCompetitionsInput = {
  where?: Prisma.EventWhereInput
  data: Prisma.XOR<Prisma.EventUpdateWithoutCompetitionsInput, Prisma.EventUncheckedUpdateWithoutCompetitionsInput>
}

export type EventUpdateWithoutCompetitionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  candidates?: Prisma.CandidateUpdateManyWithoutEventNestedInput
  user?: Prisma.UserUpdateManyWithoutEventNestedInput
}

export type EventUncheckedUpdateWithoutCompetitionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  candidates?: Prisma.CandidateUncheckedUpdateManyWithoutEventNestedInput
  user?: Prisma.UserUncheckedUpdateManyWithoutEventNestedInput
}

export type EventCreateWithoutCandidatesInput = {
  id?: string
  name: string
  eventDate?: Date | string
  isActive?: boolean
  createdAt?: Date | string
  competitions?: Prisma.CompetitionCreateNestedManyWithoutEventInput
  user?: Prisma.UserCreateNestedManyWithoutEventInput
}

export type EventUncheckedCreateWithoutCandidatesInput = {
  id?: string
  name: string
  eventDate?: Date | string
  isActive?: boolean
  createdAt?: Date | string
  competitions?: Prisma.CompetitionUncheckedCreateNestedManyWithoutEventInput
  user?: Prisma.UserUncheckedCreateNestedManyWithoutEventInput
}

export type EventCreateOrConnectWithoutCandidatesInput = {
  where: Prisma.EventWhereUniqueInput
  create: Prisma.XOR<Prisma.EventCreateWithoutCandidatesInput, Prisma.EventUncheckedCreateWithoutCandidatesInput>
}

export type EventUpsertWithoutCandidatesInput = {
  update: Prisma.XOR<Prisma.EventUpdateWithoutCandidatesInput, Prisma.EventUncheckedUpdateWithoutCandidatesInput>
  create: Prisma.XOR<Prisma.EventCreateWithoutCandidatesInput, Prisma.EventUncheckedCreateWithoutCandidatesInput>
  where?: Prisma.EventWhereInput
}

export type EventUpdateToOneWithWhereWithoutCandidatesInput = {
  where?: Prisma.EventWhereInput
  data: Prisma.XOR<Prisma.EventUpdateWithoutCandidatesInput, Prisma.EventUncheckedUpdateWithoutCandidatesInput>
}

export type EventUpdateWithoutCandidatesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  competitions?: Prisma.CompetitionUpdateManyWithoutEventNestedInput
  user?: Prisma.UserUpdateManyWithoutEventNestedInput
}

export type EventUncheckedUpdateWithoutCandidatesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  competitions?: Prisma.CompetitionUncheckedUpdateManyWithoutEventNestedInput
  user?: Prisma.UserUncheckedUpdateManyWithoutEventNestedInput
}


/**
 * Count Type EventCountOutputType
 */

export type EventCountOutputType = {
  candidates: number
  competitions: number
  user: number
}

export type EventCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  candidates?: boolean | EventCountOutputTypeCountCandidatesArgs
  competitions?: boolean | EventCountOutputTypeCountCompetitionsArgs
  user?: boolean | EventCountOutputTypeCountUserArgs
}

/**
 * EventCountOutputType without action
 */
export type EventCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventCountOutputType
   */
  select?: Prisma.EventCountOutputTypeSelect<ExtArgs> | null
}

/**
 * EventCountOutputType without action
 */
export type EventCountOutputTypeCountCandidatesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CandidateWhereInput
}

/**
 * EventCountOutputType without action
 */
export type EventCountOutputTypeCountCompetitionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CompetitionWhereInput
}

/**
 * EventCountOutputType without action
 */
export type EventCountOutputTypeCountUserArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWhereInput
}


export type EventSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  eventDate?: boolean
  isActive?: boolean
  createdAt?: boolean
  candidates?: boolean | Prisma.Event$candidatesArgs<ExtArgs>
  competitions?: boolean | Prisma.Event$competitionsArgs<ExtArgs>
  user?: boolean | Prisma.Event$userArgs<ExtArgs>
  _count?: boolean | Prisma.EventCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["event"]>

export type EventSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  eventDate?: boolean
  isActive?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["event"]>

export type EventSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  eventDate?: boolean
  isActive?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["event"]>

export type EventSelectScalar = {
  id?: boolean
  name?: boolean
  eventDate?: boolean
  isActive?: boolean
  createdAt?: boolean
}

export type EventOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "eventDate" | "isActive" | "createdAt", ExtArgs["result"]["event"]>
export type EventInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  candidates?: boolean | Prisma.Event$candidatesArgs<ExtArgs>
  competitions?: boolean | Prisma.Event$competitionsArgs<ExtArgs>
  user?: boolean | Prisma.Event$userArgs<ExtArgs>
  _count?: boolean | Prisma.EventCountOutputTypeDefaultArgs<ExtArgs>
}
export type EventIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type EventIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $EventPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Event"
  objects: {
    candidates: Prisma.$CandidatePayload<ExtArgs>[]
    competitions: Prisma.$CompetitionPayload<ExtArgs>[]
    user: Prisma.$UserPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    eventDate: Date
    isActive: boolean
    createdAt: Date
  }, ExtArgs["result"]["event"]>
  composites: {}
}

export type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EventPayload, S>

export type EventCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EventCountAggregateInputType | true
  }

export interface EventDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
  /**
   * Find zero or one Event that matches the filter.
   * @param {EventFindUniqueArgs} args - Arguments to find a Event
   * @example
   * // Get one Event
   * const event = await prisma.event.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EventFindUniqueArgs>(args: Prisma.SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EventClient<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Event that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
   * @example
   * // Get one Event
   * const event = await prisma.event.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EventClient<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Event that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventFindFirstArgs} args - Arguments to find a Event
   * @example
   * // Get one Event
   * const event = await prisma.event.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EventFindFirstArgs>(args?: Prisma.SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma.Prisma__EventClient<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Event that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
   * @example
   * // Get one Event
   * const event = await prisma.event.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EventClient<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Events that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Events
   * const events = await prisma.event.findMany()
   * 
   * // Get first 10 Events
   * const events = await prisma.event.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EventFindManyArgs>(args?: Prisma.SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Event.
   * @param {EventCreateArgs} args - Arguments to create a Event.
   * @example
   * // Create one Event
   * const Event = await prisma.event.create({
   *   data: {
   *     // ... data to create a Event
   *   }
   * })
   * 
   */
  create<T extends EventCreateArgs>(args: Prisma.SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma.Prisma__EventClient<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Events.
   * @param {EventCreateManyArgs} args - Arguments to create many Events.
   * @example
   * // Create many Events
   * const event = await prisma.event.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EventCreateManyArgs>(args?: Prisma.SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Events and returns the data saved in the database.
   * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
   * @example
   * // Create many Events
   * const event = await prisma.event.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Events and only return the `id`
   * const eventWithIdOnly = await prisma.event.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Event.
   * @param {EventDeleteArgs} args - Arguments to delete one Event.
   * @example
   * // Delete one Event
   * const Event = await prisma.event.delete({
   *   where: {
   *     // ... filter to delete one Event
   *   }
   * })
   * 
   */
  delete<T extends EventDeleteArgs>(args: Prisma.SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma.Prisma__EventClient<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Event.
   * @param {EventUpdateArgs} args - Arguments to update one Event.
   * @example
   * // Update one Event
   * const event = await prisma.event.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EventUpdateArgs>(args: Prisma.SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma.Prisma__EventClient<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Events.
   * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
   * @example
   * // Delete a few Events
   * const { count } = await prisma.event.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EventDeleteManyArgs>(args?: Prisma.SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Events.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Events
   * const event = await prisma.event.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EventUpdateManyArgs>(args: Prisma.SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Events and returns the data updated in the database.
   * @param {EventUpdateManyAndReturnArgs} args - Arguments to update many Events.
   * @example
   * // Update many Events
   * const event = await prisma.event.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Events and only return the `id`
   * const eventWithIdOnly = await prisma.event.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EventUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Event.
   * @param {EventUpsertArgs} args - Arguments to update or create a Event.
   * @example
   * // Update or create a Event
   * const event = await prisma.event.upsert({
   *   create: {
   *     // ... data to create a Event
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Event we want to update
   *   }
   * })
   */
  upsert<T extends EventUpsertArgs>(args: Prisma.SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma.Prisma__EventClient<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Events.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventCountArgs} args - Arguments to filter Events to count.
   * @example
   * // Count the number of Events
   * const count = await prisma.event.count({
   *   where: {
   *     // ... the filter for the Events we want to count
   *   }
   * })
  **/
  count<T extends EventCountArgs>(
    args?: Prisma.Subset<T, EventCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EventCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Event.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EventAggregateArgs>(args: Prisma.Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

  /**
   * Group by Event.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EventGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EventGroupByArgs['orderBy'] }
      : { orderBy?: EventGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Event model
 */
readonly fields: EventFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Event.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EventClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  candidates<T extends Prisma.Event$candidatesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Event$candidatesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  competitions<T extends Prisma.Event$competitionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Event$competitionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  user<T extends Prisma.Event$userArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Event$userArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Event model
 */
export interface EventFieldRefs {
  readonly id: Prisma.FieldRef<"Event", 'String'>
  readonly name: Prisma.FieldRef<"Event", 'String'>
  readonly eventDate: Prisma.FieldRef<"Event", 'DateTime'>
  readonly isActive: Prisma.FieldRef<"Event", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"Event", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Event findUnique
 */
export type EventFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * Filter, which Event to fetch.
   */
  where: Prisma.EventWhereUniqueInput
}

/**
 * Event findUniqueOrThrow
 */
export type EventFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * Filter, which Event to fetch.
   */
  where: Prisma.EventWhereUniqueInput
}

/**
 * Event findFirst
 */
export type EventFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * Filter, which Event to fetch.
   */
  where?: Prisma.EventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Events to fetch.
   */
  orderBy?: Prisma.EventOrderByWithRelationInput | Prisma.EventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Events.
   */
  cursor?: Prisma.EventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Events from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Events.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Events.
   */
  distinct?: Prisma.EventScalarFieldEnum | Prisma.EventScalarFieldEnum[]
}

/**
 * Event findFirstOrThrow
 */
export type EventFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * Filter, which Event to fetch.
   */
  where?: Prisma.EventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Events to fetch.
   */
  orderBy?: Prisma.EventOrderByWithRelationInput | Prisma.EventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Events.
   */
  cursor?: Prisma.EventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Events from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Events.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Events.
   */
  distinct?: Prisma.EventScalarFieldEnum | Prisma.EventScalarFieldEnum[]
}

/**
 * Event findMany
 */
export type EventFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * Filter, which Events to fetch.
   */
  where?: Prisma.EventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Events to fetch.
   */
  orderBy?: Prisma.EventOrderByWithRelationInput | Prisma.EventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Events.
   */
  cursor?: Prisma.EventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Events from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Events.
   */
  skip?: number
  distinct?: Prisma.EventScalarFieldEnum | Prisma.EventScalarFieldEnum[]
}

/**
 * Event create
 */
export type EventCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * The data needed to create a Event.
   */
  data: Prisma.XOR<Prisma.EventCreateInput, Prisma.EventUncheckedCreateInput>
}

/**
 * Event createMany
 */
export type EventCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Events.
   */
  data: Prisma.EventCreateManyInput | Prisma.EventCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Event createManyAndReturn
 */
export type EventCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * The data used to create many Events.
   */
  data: Prisma.EventCreateManyInput | Prisma.EventCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Event update
 */
export type EventUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * The data needed to update a Event.
   */
  data: Prisma.XOR<Prisma.EventUpdateInput, Prisma.EventUncheckedUpdateInput>
  /**
   * Choose, which Event to update.
   */
  where: Prisma.EventWhereUniqueInput
}

/**
 * Event updateMany
 */
export type EventUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Events.
   */
  data: Prisma.XOR<Prisma.EventUpdateManyMutationInput, Prisma.EventUncheckedUpdateManyInput>
  /**
   * Filter which Events to update
   */
  where?: Prisma.EventWhereInput
  /**
   * Limit how many Events to update.
   */
  limit?: number
}

/**
 * Event updateManyAndReturn
 */
export type EventUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * The data used to update Events.
   */
  data: Prisma.XOR<Prisma.EventUpdateManyMutationInput, Prisma.EventUncheckedUpdateManyInput>
  /**
   * Filter which Events to update
   */
  where?: Prisma.EventWhereInput
  /**
   * Limit how many Events to update.
   */
  limit?: number
}

/**
 * Event upsert
 */
export type EventUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * The filter to search for the Event to update in case it exists.
   */
  where: Prisma.EventWhereUniqueInput
  /**
   * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
   */
  create: Prisma.XOR<Prisma.EventCreateInput, Prisma.EventUncheckedCreateInput>
  /**
   * In case the Event was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EventUpdateInput, Prisma.EventUncheckedUpdateInput>
}

/**
 * Event delete
 */
export type EventDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * Filter which Event to delete.
   */
  where: Prisma.EventWhereUniqueInput
}

/**
 * Event deleteMany
 */
export type EventDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Events to delete
   */
  where?: Prisma.EventWhereInput
  /**
   * Limit how many Events to delete.
   */
  limit?: number
}

/**
 * Event.candidates
 */
export type Event$candidatesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Candidate
   */
  select?: Prisma.CandidateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Candidate
   */
  omit?: Prisma.CandidateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CandidateInclude<ExtArgs> | null
  where?: Prisma.CandidateWhereInput
  orderBy?: Prisma.CandidateOrderByWithRelationInput | Prisma.CandidateOrderByWithRelationInput[]
  cursor?: Prisma.CandidateWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CandidateScalarFieldEnum | Prisma.CandidateScalarFieldEnum[]
}

/**
 * Event.competitions
 */
export type Event$competitionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Competition
   */
  select?: Prisma.CompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Competition
   */
  omit?: Prisma.CompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitionInclude<ExtArgs> | null
  where?: Prisma.CompetitionWhereInput
  orderBy?: Prisma.CompetitionOrderByWithRelationInput | Prisma.CompetitionOrderByWithRelationInput[]
  cursor?: Prisma.CompetitionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CompetitionScalarFieldEnum | Prisma.CompetitionScalarFieldEnum[]
}

/**
 * Event.user
 */
export type Event$userArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  cursor?: Prisma.UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * Event without action
 */
export type EventDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
}
