
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Scoresheet` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Scoresheet
 * 
 */
export type ScoresheetModel = runtime.Types.Result.DefaultSelection<Prisma.$ScoresheetPayload>

export type AggregateScoresheet = {
  _count: ScoresheetCountAggregateOutputType | null
  _avg: ScoresheetAvgAggregateOutputType | null
  _sum: ScoresheetSumAggregateOutputType | null
  _min: ScoresheetMinAggregateOutputType | null
  _max: ScoresheetMaxAggregateOutputType | null
}

export type ScoresheetAvgAggregateOutputType = {
  total: runtime.Decimal | null
  rank: number | null
}

export type ScoresheetSumAggregateOutputType = {
  total: runtime.Decimal | null
  rank: number | null
}

export type ScoresheetMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  competitionId: string | null
  candidateId: string | null
  userId: string | null
  total: runtime.Decimal | null
  rank: number | null
}

export type ScoresheetMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  competitionId: string | null
  candidateId: string | null
  userId: string | null
  total: runtime.Decimal | null
  rank: number | null
}

export type ScoresheetCountAggregateOutputType = {
  id: number
  createdAt: number
  competitionId: number
  candidateId: number
  userId: number
  scores: number
  total: number
  rank: number
  _all: number
}


export type ScoresheetAvgAggregateInputType = {
  total?: true
  rank?: true
}

export type ScoresheetSumAggregateInputType = {
  total?: true
  rank?: true
}

export type ScoresheetMinAggregateInputType = {
  id?: true
  createdAt?: true
  competitionId?: true
  candidateId?: true
  userId?: true
  total?: true
  rank?: true
}

export type ScoresheetMaxAggregateInputType = {
  id?: true
  createdAt?: true
  competitionId?: true
  candidateId?: true
  userId?: true
  total?: true
  rank?: true
}

export type ScoresheetCountAggregateInputType = {
  id?: true
  createdAt?: true
  competitionId?: true
  candidateId?: true
  userId?: true
  scores?: true
  total?: true
  rank?: true
  _all?: true
}

export type ScoresheetAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Scoresheet to aggregate.
   */
  where?: Prisma.ScoresheetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Scoresheets to fetch.
   */
  orderBy?: Prisma.ScoresheetOrderByWithRelationInput | Prisma.ScoresheetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ScoresheetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Scoresheets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Scoresheets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Scoresheets
  **/
  _count?: true | ScoresheetCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ScoresheetAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ScoresheetSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ScoresheetMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ScoresheetMaxAggregateInputType
}

export type GetScoresheetAggregateType<T extends ScoresheetAggregateArgs> = {
      [P in keyof T & keyof AggregateScoresheet]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateScoresheet[P]>
    : Prisma.GetScalarType<T[P], AggregateScoresheet[P]>
}




export type ScoresheetGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ScoresheetWhereInput
  orderBy?: Prisma.ScoresheetOrderByWithAggregationInput | Prisma.ScoresheetOrderByWithAggregationInput[]
  by: Prisma.ScoresheetScalarFieldEnum[] | Prisma.ScoresheetScalarFieldEnum
  having?: Prisma.ScoresheetScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ScoresheetCountAggregateInputType | true
  _avg?: ScoresheetAvgAggregateInputType
  _sum?: ScoresheetSumAggregateInputType
  _min?: ScoresheetMinAggregateInputType
  _max?: ScoresheetMaxAggregateInputType
}

export type ScoresheetGroupByOutputType = {
  id: string
  createdAt: Date
  competitionId: string
  candidateId: string
  userId: string
  scores: runtime.JsonValue[]
  total: runtime.Decimal
  rank: number
  _count: ScoresheetCountAggregateOutputType | null
  _avg: ScoresheetAvgAggregateOutputType | null
  _sum: ScoresheetSumAggregateOutputType | null
  _min: ScoresheetMinAggregateOutputType | null
  _max: ScoresheetMaxAggregateOutputType | null
}

type GetScoresheetGroupByPayload<T extends ScoresheetGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ScoresheetGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ScoresheetGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ScoresheetGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ScoresheetGroupByOutputType[P]>
      }
    >
  > 



export type ScoresheetWhereInput = {
  AND?: Prisma.ScoresheetWhereInput | Prisma.ScoresheetWhereInput[]
  OR?: Prisma.ScoresheetWhereInput[]
  NOT?: Prisma.ScoresheetWhereInput | Prisma.ScoresheetWhereInput[]
  id?: Prisma.StringFilter<"Scoresheet"> | string
  createdAt?: Prisma.DateTimeFilter<"Scoresheet"> | Date | string
  competitionId?: Prisma.StringFilter<"Scoresheet"> | string
  candidateId?: Prisma.StringFilter<"Scoresheet"> | string
  userId?: Prisma.StringFilter<"Scoresheet"> | string
  scores?: Prisma.JsonNullableListFilter<"Scoresheet">
  total?: Prisma.DecimalFilter<"Scoresheet"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntFilter<"Scoresheet"> | number
  candidate?: Prisma.XOR<Prisma.CandidateScalarRelationFilter, Prisma.CandidateWhereInput>
  competition?: Prisma.XOR<Prisma.CompetitionScalarRelationFilter, Prisma.CompetitionWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type ScoresheetOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  competitionId?: Prisma.SortOrder
  candidateId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  scores?: Prisma.SortOrder
  total?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  candidate?: Prisma.CandidateOrderByWithRelationInput
  competition?: Prisma.CompetitionOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type ScoresheetWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ScoresheetWhereInput | Prisma.ScoresheetWhereInput[]
  OR?: Prisma.ScoresheetWhereInput[]
  NOT?: Prisma.ScoresheetWhereInput | Prisma.ScoresheetWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"Scoresheet"> | Date | string
  competitionId?: Prisma.StringFilter<"Scoresheet"> | string
  candidateId?: Prisma.StringFilter<"Scoresheet"> | string
  userId?: Prisma.StringFilter<"Scoresheet"> | string
  scores?: Prisma.JsonNullableListFilter<"Scoresheet">
  total?: Prisma.DecimalFilter<"Scoresheet"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntFilter<"Scoresheet"> | number
  candidate?: Prisma.XOR<Prisma.CandidateScalarRelationFilter, Prisma.CandidateWhereInput>
  competition?: Prisma.XOR<Prisma.CompetitionScalarRelationFilter, Prisma.CompetitionWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type ScoresheetOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  competitionId?: Prisma.SortOrder
  candidateId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  scores?: Prisma.SortOrder
  total?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  _count?: Prisma.ScoresheetCountOrderByAggregateInput
  _avg?: Prisma.ScoresheetAvgOrderByAggregateInput
  _max?: Prisma.ScoresheetMaxOrderByAggregateInput
  _min?: Prisma.ScoresheetMinOrderByAggregateInput
  _sum?: Prisma.ScoresheetSumOrderByAggregateInput
}

export type ScoresheetScalarWhereWithAggregatesInput = {
  AND?: Prisma.ScoresheetScalarWhereWithAggregatesInput | Prisma.ScoresheetScalarWhereWithAggregatesInput[]
  OR?: Prisma.ScoresheetScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ScoresheetScalarWhereWithAggregatesInput | Prisma.ScoresheetScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Scoresheet"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Scoresheet"> | Date | string
  competitionId?: Prisma.StringWithAggregatesFilter<"Scoresheet"> | string
  candidateId?: Prisma.StringWithAggregatesFilter<"Scoresheet"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Scoresheet"> | string
  scores?: Prisma.JsonNullableListFilter<"Scoresheet">
  total?: Prisma.DecimalWithAggregatesFilter<"Scoresheet"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntWithAggregatesFilter<"Scoresheet"> | number
}

export type ScoresheetCreateInput = {
  id?: string
  createdAt?: Date | string
  scores?: Prisma.ScoresheetCreatescoresInput | runtime.InputJsonValue[]
  total?: runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: number
  candidate: Prisma.CandidateCreateNestedOneWithoutScoresheetInput
  competition: Prisma.CompetitionCreateNestedOneWithoutScoresheetInput
  user: Prisma.UserCreateNestedOneWithoutScoresheetInput
}

export type ScoresheetUncheckedCreateInput = {
  id?: string
  createdAt?: Date | string
  competitionId: string
  candidateId: string
  userId: string
  scores?: Prisma.ScoresheetCreatescoresInput | runtime.InputJsonValue[]
  total?: runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: number
}

export type ScoresheetUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scores?: Prisma.ScoresheetUpdatescoresInput | runtime.InputJsonValue[]
  total?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  candidate?: Prisma.CandidateUpdateOneRequiredWithoutScoresheetNestedInput
  competition?: Prisma.CompetitionUpdateOneRequiredWithoutScoresheetNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutScoresheetNestedInput
}

export type ScoresheetUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  competitionId?: Prisma.StringFieldUpdateOperationsInput | string
  candidateId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  scores?: Prisma.ScoresheetUpdatescoresInput | runtime.InputJsonValue[]
  total?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ScoresheetCreateManyInput = {
  id?: string
  createdAt?: Date | string
  competitionId: string
  candidateId: string
  userId: string
  scores?: Prisma.ScoresheetCreatescoresInput | runtime.InputJsonValue[]
  total?: runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: number
}

export type ScoresheetUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scores?: Prisma.ScoresheetUpdatescoresInput | runtime.InputJsonValue[]
  total?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ScoresheetUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  competitionId?: Prisma.StringFieldUpdateOperationsInput | string
  candidateId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  scores?: Prisma.ScoresheetUpdatescoresInput | runtime.InputJsonValue[]
  total?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ScoresheetListRelationFilter = {
  every?: Prisma.ScoresheetWhereInput
  some?: Prisma.ScoresheetWhereInput
  none?: Prisma.ScoresheetWhereInput
}

export type ScoresheetOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ScoresheetCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  competitionId?: Prisma.SortOrder
  candidateId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  scores?: Prisma.SortOrder
  total?: Prisma.SortOrder
  rank?: Prisma.SortOrder
}

export type ScoresheetAvgOrderByAggregateInput = {
  total?: Prisma.SortOrder
  rank?: Prisma.SortOrder
}

export type ScoresheetMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  competitionId?: Prisma.SortOrder
  candidateId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  total?: Prisma.SortOrder
  rank?: Prisma.SortOrder
}

export type ScoresheetMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  competitionId?: Prisma.SortOrder
  candidateId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  total?: Prisma.SortOrder
  rank?: Prisma.SortOrder
}

export type ScoresheetSumOrderByAggregateInput = {
  total?: Prisma.SortOrder
  rank?: Prisma.SortOrder
}

export type ScoresheetCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ScoresheetCreateWithoutUserInput, Prisma.ScoresheetUncheckedCreateWithoutUserInput> | Prisma.ScoresheetCreateWithoutUserInput[] | Prisma.ScoresheetUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ScoresheetCreateOrConnectWithoutUserInput | Prisma.ScoresheetCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ScoresheetCreateManyUserInputEnvelope
  connect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
}

export type ScoresheetUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ScoresheetCreateWithoutUserInput, Prisma.ScoresheetUncheckedCreateWithoutUserInput> | Prisma.ScoresheetCreateWithoutUserInput[] | Prisma.ScoresheetUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ScoresheetCreateOrConnectWithoutUserInput | Prisma.ScoresheetCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ScoresheetCreateManyUserInputEnvelope
  connect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
}

export type ScoresheetUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ScoresheetCreateWithoutUserInput, Prisma.ScoresheetUncheckedCreateWithoutUserInput> | Prisma.ScoresheetCreateWithoutUserInput[] | Prisma.ScoresheetUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ScoresheetCreateOrConnectWithoutUserInput | Prisma.ScoresheetCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ScoresheetUpsertWithWhereUniqueWithoutUserInput | Prisma.ScoresheetUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ScoresheetCreateManyUserInputEnvelope
  set?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  disconnect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  delete?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  connect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  update?: Prisma.ScoresheetUpdateWithWhereUniqueWithoutUserInput | Prisma.ScoresheetUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ScoresheetUpdateManyWithWhereWithoutUserInput | Prisma.ScoresheetUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ScoresheetScalarWhereInput | Prisma.ScoresheetScalarWhereInput[]
}

export type ScoresheetUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ScoresheetCreateWithoutUserInput, Prisma.ScoresheetUncheckedCreateWithoutUserInput> | Prisma.ScoresheetCreateWithoutUserInput[] | Prisma.ScoresheetUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ScoresheetCreateOrConnectWithoutUserInput | Prisma.ScoresheetCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ScoresheetUpsertWithWhereUniqueWithoutUserInput | Prisma.ScoresheetUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ScoresheetCreateManyUserInputEnvelope
  set?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  disconnect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  delete?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  connect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  update?: Prisma.ScoresheetUpdateWithWhereUniqueWithoutUserInput | Prisma.ScoresheetUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ScoresheetUpdateManyWithWhereWithoutUserInput | Prisma.ScoresheetUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ScoresheetScalarWhereInput | Prisma.ScoresheetScalarWhereInput[]
}

export type ScoresheetCreateNestedManyWithoutCompetitionInput = {
  create?: Prisma.XOR<Prisma.ScoresheetCreateWithoutCompetitionInput, Prisma.ScoresheetUncheckedCreateWithoutCompetitionInput> | Prisma.ScoresheetCreateWithoutCompetitionInput[] | Prisma.ScoresheetUncheckedCreateWithoutCompetitionInput[]
  connectOrCreate?: Prisma.ScoresheetCreateOrConnectWithoutCompetitionInput | Prisma.ScoresheetCreateOrConnectWithoutCompetitionInput[]
  createMany?: Prisma.ScoresheetCreateManyCompetitionInputEnvelope
  connect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
}

export type ScoresheetUncheckedCreateNestedManyWithoutCompetitionInput = {
  create?: Prisma.XOR<Prisma.ScoresheetCreateWithoutCompetitionInput, Prisma.ScoresheetUncheckedCreateWithoutCompetitionInput> | Prisma.ScoresheetCreateWithoutCompetitionInput[] | Prisma.ScoresheetUncheckedCreateWithoutCompetitionInput[]
  connectOrCreate?: Prisma.ScoresheetCreateOrConnectWithoutCompetitionInput | Prisma.ScoresheetCreateOrConnectWithoutCompetitionInput[]
  createMany?: Prisma.ScoresheetCreateManyCompetitionInputEnvelope
  connect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
}

export type ScoresheetUpdateManyWithoutCompetitionNestedInput = {
  create?: Prisma.XOR<Prisma.ScoresheetCreateWithoutCompetitionInput, Prisma.ScoresheetUncheckedCreateWithoutCompetitionInput> | Prisma.ScoresheetCreateWithoutCompetitionInput[] | Prisma.ScoresheetUncheckedCreateWithoutCompetitionInput[]
  connectOrCreate?: Prisma.ScoresheetCreateOrConnectWithoutCompetitionInput | Prisma.ScoresheetCreateOrConnectWithoutCompetitionInput[]
  upsert?: Prisma.ScoresheetUpsertWithWhereUniqueWithoutCompetitionInput | Prisma.ScoresheetUpsertWithWhereUniqueWithoutCompetitionInput[]
  createMany?: Prisma.ScoresheetCreateManyCompetitionInputEnvelope
  set?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  disconnect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  delete?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  connect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  update?: Prisma.ScoresheetUpdateWithWhereUniqueWithoutCompetitionInput | Prisma.ScoresheetUpdateWithWhereUniqueWithoutCompetitionInput[]
  updateMany?: Prisma.ScoresheetUpdateManyWithWhereWithoutCompetitionInput | Prisma.ScoresheetUpdateManyWithWhereWithoutCompetitionInput[]
  deleteMany?: Prisma.ScoresheetScalarWhereInput | Prisma.ScoresheetScalarWhereInput[]
}

export type ScoresheetUncheckedUpdateManyWithoutCompetitionNestedInput = {
  create?: Prisma.XOR<Prisma.ScoresheetCreateWithoutCompetitionInput, Prisma.ScoresheetUncheckedCreateWithoutCompetitionInput> | Prisma.ScoresheetCreateWithoutCompetitionInput[] | Prisma.ScoresheetUncheckedCreateWithoutCompetitionInput[]
  connectOrCreate?: Prisma.ScoresheetCreateOrConnectWithoutCompetitionInput | Prisma.ScoresheetCreateOrConnectWithoutCompetitionInput[]
  upsert?: Prisma.ScoresheetUpsertWithWhereUniqueWithoutCompetitionInput | Prisma.ScoresheetUpsertWithWhereUniqueWithoutCompetitionInput[]
  createMany?: Prisma.ScoresheetCreateManyCompetitionInputEnvelope
  set?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  disconnect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  delete?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  connect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  update?: Prisma.ScoresheetUpdateWithWhereUniqueWithoutCompetitionInput | Prisma.ScoresheetUpdateWithWhereUniqueWithoutCompetitionInput[]
  updateMany?: Prisma.ScoresheetUpdateManyWithWhereWithoutCompetitionInput | Prisma.ScoresheetUpdateManyWithWhereWithoutCompetitionInput[]
  deleteMany?: Prisma.ScoresheetScalarWhereInput | Prisma.ScoresheetScalarWhereInput[]
}

export type ScoresheetCreatescoresInput = {
  set: runtime.InputJsonValue[]
}

export type ScoresheetUpdatescoresInput = {
  set?: runtime.InputJsonValue[]
  push?: runtime.InputJsonValue | runtime.InputJsonValue[]
}

export type ScoresheetCreateNestedManyWithoutCandidateInput = {
  create?: Prisma.XOR<Prisma.ScoresheetCreateWithoutCandidateInput, Prisma.ScoresheetUncheckedCreateWithoutCandidateInput> | Prisma.ScoresheetCreateWithoutCandidateInput[] | Prisma.ScoresheetUncheckedCreateWithoutCandidateInput[]
  connectOrCreate?: Prisma.ScoresheetCreateOrConnectWithoutCandidateInput | Prisma.ScoresheetCreateOrConnectWithoutCandidateInput[]
  createMany?: Prisma.ScoresheetCreateManyCandidateInputEnvelope
  connect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
}

export type ScoresheetUncheckedCreateNestedManyWithoutCandidateInput = {
  create?: Prisma.XOR<Prisma.ScoresheetCreateWithoutCandidateInput, Prisma.ScoresheetUncheckedCreateWithoutCandidateInput> | Prisma.ScoresheetCreateWithoutCandidateInput[] | Prisma.ScoresheetUncheckedCreateWithoutCandidateInput[]
  connectOrCreate?: Prisma.ScoresheetCreateOrConnectWithoutCandidateInput | Prisma.ScoresheetCreateOrConnectWithoutCandidateInput[]
  createMany?: Prisma.ScoresheetCreateManyCandidateInputEnvelope
  connect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
}

export type ScoresheetUpdateManyWithoutCandidateNestedInput = {
  create?: Prisma.XOR<Prisma.ScoresheetCreateWithoutCandidateInput, Prisma.ScoresheetUncheckedCreateWithoutCandidateInput> | Prisma.ScoresheetCreateWithoutCandidateInput[] | Prisma.ScoresheetUncheckedCreateWithoutCandidateInput[]
  connectOrCreate?: Prisma.ScoresheetCreateOrConnectWithoutCandidateInput | Prisma.ScoresheetCreateOrConnectWithoutCandidateInput[]
  upsert?: Prisma.ScoresheetUpsertWithWhereUniqueWithoutCandidateInput | Prisma.ScoresheetUpsertWithWhereUniqueWithoutCandidateInput[]
  createMany?: Prisma.ScoresheetCreateManyCandidateInputEnvelope
  set?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  disconnect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  delete?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  connect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  update?: Prisma.ScoresheetUpdateWithWhereUniqueWithoutCandidateInput | Prisma.ScoresheetUpdateWithWhereUniqueWithoutCandidateInput[]
  updateMany?: Prisma.ScoresheetUpdateManyWithWhereWithoutCandidateInput | Prisma.ScoresheetUpdateManyWithWhereWithoutCandidateInput[]
  deleteMany?: Prisma.ScoresheetScalarWhereInput | Prisma.ScoresheetScalarWhereInput[]
}

export type ScoresheetUncheckedUpdateManyWithoutCandidateNestedInput = {
  create?: Prisma.XOR<Prisma.ScoresheetCreateWithoutCandidateInput, Prisma.ScoresheetUncheckedCreateWithoutCandidateInput> | Prisma.ScoresheetCreateWithoutCandidateInput[] | Prisma.ScoresheetUncheckedCreateWithoutCandidateInput[]
  connectOrCreate?: Prisma.ScoresheetCreateOrConnectWithoutCandidateInput | Prisma.ScoresheetCreateOrConnectWithoutCandidateInput[]
  upsert?: Prisma.ScoresheetUpsertWithWhereUniqueWithoutCandidateInput | Prisma.ScoresheetUpsertWithWhereUniqueWithoutCandidateInput[]
  createMany?: Prisma.ScoresheetCreateManyCandidateInputEnvelope
  set?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  disconnect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  delete?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  connect?: Prisma.ScoresheetWhereUniqueInput | Prisma.ScoresheetWhereUniqueInput[]
  update?: Prisma.ScoresheetUpdateWithWhereUniqueWithoutCandidateInput | Prisma.ScoresheetUpdateWithWhereUniqueWithoutCandidateInput[]
  updateMany?: Prisma.ScoresheetUpdateManyWithWhereWithoutCandidateInput | Prisma.ScoresheetUpdateManyWithWhereWithoutCandidateInput[]
  deleteMany?: Prisma.ScoresheetScalarWhereInput | Prisma.ScoresheetScalarWhereInput[]
}

export type ScoresheetCreateWithoutUserInput = {
  id?: string
  createdAt?: Date | string
  scores?: Prisma.ScoresheetCreatescoresInput | runtime.InputJsonValue[]
  total?: runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: number
  candidate: Prisma.CandidateCreateNestedOneWithoutScoresheetInput
  competition: Prisma.CompetitionCreateNestedOneWithoutScoresheetInput
}

export type ScoresheetUncheckedCreateWithoutUserInput = {
  id?: string
  createdAt?: Date | string
  competitionId: string
  candidateId: string
  scores?: Prisma.ScoresheetCreatescoresInput | runtime.InputJsonValue[]
  total?: runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: number
}

export type ScoresheetCreateOrConnectWithoutUserInput = {
  where: Prisma.ScoresheetWhereUniqueInput
  create: Prisma.XOR<Prisma.ScoresheetCreateWithoutUserInput, Prisma.ScoresheetUncheckedCreateWithoutUserInput>
}

export type ScoresheetCreateManyUserInputEnvelope = {
  data: Prisma.ScoresheetCreateManyUserInput | Prisma.ScoresheetCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ScoresheetUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ScoresheetWhereUniqueInput
  update: Prisma.XOR<Prisma.ScoresheetUpdateWithoutUserInput, Prisma.ScoresheetUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ScoresheetCreateWithoutUserInput, Prisma.ScoresheetUncheckedCreateWithoutUserInput>
}

export type ScoresheetUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ScoresheetWhereUniqueInput
  data: Prisma.XOR<Prisma.ScoresheetUpdateWithoutUserInput, Prisma.ScoresheetUncheckedUpdateWithoutUserInput>
}

export type ScoresheetUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ScoresheetScalarWhereInput
  data: Prisma.XOR<Prisma.ScoresheetUpdateManyMutationInput, Prisma.ScoresheetUncheckedUpdateManyWithoutUserInput>
}

export type ScoresheetScalarWhereInput = {
  AND?: Prisma.ScoresheetScalarWhereInput | Prisma.ScoresheetScalarWhereInput[]
  OR?: Prisma.ScoresheetScalarWhereInput[]
  NOT?: Prisma.ScoresheetScalarWhereInput | Prisma.ScoresheetScalarWhereInput[]
  id?: Prisma.StringFilter<"Scoresheet"> | string
  createdAt?: Prisma.DateTimeFilter<"Scoresheet"> | Date | string
  competitionId?: Prisma.StringFilter<"Scoresheet"> | string
  candidateId?: Prisma.StringFilter<"Scoresheet"> | string
  userId?: Prisma.StringFilter<"Scoresheet"> | string
  scores?: Prisma.JsonNullableListFilter<"Scoresheet">
  total?: Prisma.DecimalFilter<"Scoresheet"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntFilter<"Scoresheet"> | number
}

export type ScoresheetCreateWithoutCompetitionInput = {
  id?: string
  createdAt?: Date | string
  scores?: Prisma.ScoresheetCreatescoresInput | runtime.InputJsonValue[]
  total?: runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: number
  candidate: Prisma.CandidateCreateNestedOneWithoutScoresheetInput
  user: Prisma.UserCreateNestedOneWithoutScoresheetInput
}

export type ScoresheetUncheckedCreateWithoutCompetitionInput = {
  id?: string
  createdAt?: Date | string
  candidateId: string
  userId: string
  scores?: Prisma.ScoresheetCreatescoresInput | runtime.InputJsonValue[]
  total?: runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: number
}

export type ScoresheetCreateOrConnectWithoutCompetitionInput = {
  where: Prisma.ScoresheetWhereUniqueInput
  create: Prisma.XOR<Prisma.ScoresheetCreateWithoutCompetitionInput, Prisma.ScoresheetUncheckedCreateWithoutCompetitionInput>
}

export type ScoresheetCreateManyCompetitionInputEnvelope = {
  data: Prisma.ScoresheetCreateManyCompetitionInput | Prisma.ScoresheetCreateManyCompetitionInput[]
  skipDuplicates?: boolean
}

export type ScoresheetUpsertWithWhereUniqueWithoutCompetitionInput = {
  where: Prisma.ScoresheetWhereUniqueInput
  update: Prisma.XOR<Prisma.ScoresheetUpdateWithoutCompetitionInput, Prisma.ScoresheetUncheckedUpdateWithoutCompetitionInput>
  create: Prisma.XOR<Prisma.ScoresheetCreateWithoutCompetitionInput, Prisma.ScoresheetUncheckedCreateWithoutCompetitionInput>
}

export type ScoresheetUpdateWithWhereUniqueWithoutCompetitionInput = {
  where: Prisma.ScoresheetWhereUniqueInput
  data: Prisma.XOR<Prisma.ScoresheetUpdateWithoutCompetitionInput, Prisma.ScoresheetUncheckedUpdateWithoutCompetitionInput>
}

export type ScoresheetUpdateManyWithWhereWithoutCompetitionInput = {
  where: Prisma.ScoresheetScalarWhereInput
  data: Prisma.XOR<Prisma.ScoresheetUpdateManyMutationInput, Prisma.ScoresheetUncheckedUpdateManyWithoutCompetitionInput>
}

export type ScoresheetCreateWithoutCandidateInput = {
  id?: string
  createdAt?: Date | string
  scores?: Prisma.ScoresheetCreatescoresInput | runtime.InputJsonValue[]
  total?: runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: number
  competition: Prisma.CompetitionCreateNestedOneWithoutScoresheetInput
  user: Prisma.UserCreateNestedOneWithoutScoresheetInput
}

export type ScoresheetUncheckedCreateWithoutCandidateInput = {
  id?: string
  createdAt?: Date | string
  competitionId: string
  userId: string
  scores?: Prisma.ScoresheetCreatescoresInput | runtime.InputJsonValue[]
  total?: runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: number
}

export type ScoresheetCreateOrConnectWithoutCandidateInput = {
  where: Prisma.ScoresheetWhereUniqueInput
  create: Prisma.XOR<Prisma.ScoresheetCreateWithoutCandidateInput, Prisma.ScoresheetUncheckedCreateWithoutCandidateInput>
}

export type ScoresheetCreateManyCandidateInputEnvelope = {
  data: Prisma.ScoresheetCreateManyCandidateInput | Prisma.ScoresheetCreateManyCandidateInput[]
  skipDuplicates?: boolean
}

export type ScoresheetUpsertWithWhereUniqueWithoutCandidateInput = {
  where: Prisma.ScoresheetWhereUniqueInput
  update: Prisma.XOR<Prisma.ScoresheetUpdateWithoutCandidateInput, Prisma.ScoresheetUncheckedUpdateWithoutCandidateInput>
  create: Prisma.XOR<Prisma.ScoresheetCreateWithoutCandidateInput, Prisma.ScoresheetUncheckedCreateWithoutCandidateInput>
}

export type ScoresheetUpdateWithWhereUniqueWithoutCandidateInput = {
  where: Prisma.ScoresheetWhereUniqueInput
  data: Prisma.XOR<Prisma.ScoresheetUpdateWithoutCandidateInput, Prisma.ScoresheetUncheckedUpdateWithoutCandidateInput>
}

export type ScoresheetUpdateManyWithWhereWithoutCandidateInput = {
  where: Prisma.ScoresheetScalarWhereInput
  data: Prisma.XOR<Prisma.ScoresheetUpdateManyMutationInput, Prisma.ScoresheetUncheckedUpdateManyWithoutCandidateInput>
}

export type ScoresheetCreateManyUserInput = {
  id?: string
  createdAt?: Date | string
  competitionId: string
  candidateId: string
  scores?: Prisma.ScoresheetCreatescoresInput | runtime.InputJsonValue[]
  total?: runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: number
}

export type ScoresheetUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scores?: Prisma.ScoresheetUpdatescoresInput | runtime.InputJsonValue[]
  total?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  candidate?: Prisma.CandidateUpdateOneRequiredWithoutScoresheetNestedInput
  competition?: Prisma.CompetitionUpdateOneRequiredWithoutScoresheetNestedInput
}

export type ScoresheetUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  competitionId?: Prisma.StringFieldUpdateOperationsInput | string
  candidateId?: Prisma.StringFieldUpdateOperationsInput | string
  scores?: Prisma.ScoresheetUpdatescoresInput | runtime.InputJsonValue[]
  total?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ScoresheetUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  competitionId?: Prisma.StringFieldUpdateOperationsInput | string
  candidateId?: Prisma.StringFieldUpdateOperationsInput | string
  scores?: Prisma.ScoresheetUpdatescoresInput | runtime.InputJsonValue[]
  total?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ScoresheetCreateManyCompetitionInput = {
  id?: string
  createdAt?: Date | string
  candidateId: string
  userId: string
  scores?: Prisma.ScoresheetCreatescoresInput | runtime.InputJsonValue[]
  total?: runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: number
}

export type ScoresheetUpdateWithoutCompetitionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scores?: Prisma.ScoresheetUpdatescoresInput | runtime.InputJsonValue[]
  total?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  candidate?: Prisma.CandidateUpdateOneRequiredWithoutScoresheetNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutScoresheetNestedInput
}

export type ScoresheetUncheckedUpdateWithoutCompetitionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  candidateId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  scores?: Prisma.ScoresheetUpdatescoresInput | runtime.InputJsonValue[]
  total?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ScoresheetUncheckedUpdateManyWithoutCompetitionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  candidateId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  scores?: Prisma.ScoresheetUpdatescoresInput | runtime.InputJsonValue[]
  total?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ScoresheetCreateManyCandidateInput = {
  id?: string
  createdAt?: Date | string
  competitionId: string
  userId: string
  scores?: Prisma.ScoresheetCreatescoresInput | runtime.InputJsonValue[]
  total?: runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: number
}

export type ScoresheetUpdateWithoutCandidateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scores?: Prisma.ScoresheetUpdatescoresInput | runtime.InputJsonValue[]
  total?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  competition?: Prisma.CompetitionUpdateOneRequiredWithoutScoresheetNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutScoresheetNestedInput
}

export type ScoresheetUncheckedUpdateWithoutCandidateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  competitionId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  scores?: Prisma.ScoresheetUpdatescoresInput | runtime.InputJsonValue[]
  total?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ScoresheetUncheckedUpdateManyWithoutCandidateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  competitionId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  scores?: Prisma.ScoresheetUpdatescoresInput | runtime.InputJsonValue[]
  total?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
}



export type ScoresheetSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  competitionId?: boolean
  candidateId?: boolean
  userId?: boolean
  scores?: boolean
  total?: boolean
  rank?: boolean
  candidate?: boolean | Prisma.CandidateDefaultArgs<ExtArgs>
  competition?: boolean | Prisma.CompetitionDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["scoresheet"]>

export type ScoresheetSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  competitionId?: boolean
  candidateId?: boolean
  userId?: boolean
  scores?: boolean
  total?: boolean
  rank?: boolean
  candidate?: boolean | Prisma.CandidateDefaultArgs<ExtArgs>
  competition?: boolean | Prisma.CompetitionDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["scoresheet"]>

export type ScoresheetSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  competitionId?: boolean
  candidateId?: boolean
  userId?: boolean
  scores?: boolean
  total?: boolean
  rank?: boolean
  candidate?: boolean | Prisma.CandidateDefaultArgs<ExtArgs>
  competition?: boolean | Prisma.CompetitionDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["scoresheet"]>

export type ScoresheetSelectScalar = {
  id?: boolean
  createdAt?: boolean
  competitionId?: boolean
  candidateId?: boolean
  userId?: boolean
  scores?: boolean
  total?: boolean
  rank?: boolean
}

export type ScoresheetOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "competitionId" | "candidateId" | "userId" | "scores" | "total" | "rank", ExtArgs["result"]["scoresheet"]>
export type ScoresheetInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  candidate?: boolean | Prisma.CandidateDefaultArgs<ExtArgs>
  competition?: boolean | Prisma.CompetitionDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ScoresheetIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  candidate?: boolean | Prisma.CandidateDefaultArgs<ExtArgs>
  competition?: boolean | Prisma.CompetitionDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ScoresheetIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  candidate?: boolean | Prisma.CandidateDefaultArgs<ExtArgs>
  competition?: boolean | Prisma.CompetitionDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ScoresheetPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Scoresheet"
  objects: {
    candidate: Prisma.$CandidatePayload<ExtArgs>
    competition: Prisma.$CompetitionPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    createdAt: Date
    competitionId: string
    candidateId: string
    userId: string
    scores: runtime.JsonValue[]
    total: runtime.Decimal
    rank: number
  }, ExtArgs["result"]["scoresheet"]>
  composites: {}
}

export type ScoresheetGetPayload<S extends boolean | null | undefined | ScoresheetDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ScoresheetPayload, S>

export type ScoresheetCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ScoresheetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ScoresheetCountAggregateInputType | true
  }

export interface ScoresheetDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Scoresheet'], meta: { name: 'Scoresheet' } }
  /**
   * Find zero or one Scoresheet that matches the filter.
   * @param {ScoresheetFindUniqueArgs} args - Arguments to find a Scoresheet
   * @example
   * // Get one Scoresheet
   * const scoresheet = await prisma.scoresheet.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ScoresheetFindUniqueArgs>(args: Prisma.SelectSubset<T, ScoresheetFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ScoresheetClient<runtime.Types.Result.GetResult<Prisma.$ScoresheetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Scoresheet that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ScoresheetFindUniqueOrThrowArgs} args - Arguments to find a Scoresheet
   * @example
   * // Get one Scoresheet
   * const scoresheet = await prisma.scoresheet.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ScoresheetFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ScoresheetFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScoresheetClient<runtime.Types.Result.GetResult<Prisma.$ScoresheetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Scoresheet that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScoresheetFindFirstArgs} args - Arguments to find a Scoresheet
   * @example
   * // Get one Scoresheet
   * const scoresheet = await prisma.scoresheet.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ScoresheetFindFirstArgs>(args?: Prisma.SelectSubset<T, ScoresheetFindFirstArgs<ExtArgs>>): Prisma.Prisma__ScoresheetClient<runtime.Types.Result.GetResult<Prisma.$ScoresheetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Scoresheet that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScoresheetFindFirstOrThrowArgs} args - Arguments to find a Scoresheet
   * @example
   * // Get one Scoresheet
   * const scoresheet = await prisma.scoresheet.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ScoresheetFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ScoresheetFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScoresheetClient<runtime.Types.Result.GetResult<Prisma.$ScoresheetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Scoresheets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScoresheetFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Scoresheets
   * const scoresheets = await prisma.scoresheet.findMany()
   * 
   * // Get first 10 Scoresheets
   * const scoresheets = await prisma.scoresheet.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const scoresheetWithIdOnly = await prisma.scoresheet.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ScoresheetFindManyArgs>(args?: Prisma.SelectSubset<T, ScoresheetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScoresheetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Scoresheet.
   * @param {ScoresheetCreateArgs} args - Arguments to create a Scoresheet.
   * @example
   * // Create one Scoresheet
   * const Scoresheet = await prisma.scoresheet.create({
   *   data: {
   *     // ... data to create a Scoresheet
   *   }
   * })
   * 
   */
  create<T extends ScoresheetCreateArgs>(args: Prisma.SelectSubset<T, ScoresheetCreateArgs<ExtArgs>>): Prisma.Prisma__ScoresheetClient<runtime.Types.Result.GetResult<Prisma.$ScoresheetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Scoresheets.
   * @param {ScoresheetCreateManyArgs} args - Arguments to create many Scoresheets.
   * @example
   * // Create many Scoresheets
   * const scoresheet = await prisma.scoresheet.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ScoresheetCreateManyArgs>(args?: Prisma.SelectSubset<T, ScoresheetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Scoresheets and returns the data saved in the database.
   * @param {ScoresheetCreateManyAndReturnArgs} args - Arguments to create many Scoresheets.
   * @example
   * // Create many Scoresheets
   * const scoresheet = await prisma.scoresheet.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Scoresheets and only return the `id`
   * const scoresheetWithIdOnly = await prisma.scoresheet.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ScoresheetCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ScoresheetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScoresheetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Scoresheet.
   * @param {ScoresheetDeleteArgs} args - Arguments to delete one Scoresheet.
   * @example
   * // Delete one Scoresheet
   * const Scoresheet = await prisma.scoresheet.delete({
   *   where: {
   *     // ... filter to delete one Scoresheet
   *   }
   * })
   * 
   */
  delete<T extends ScoresheetDeleteArgs>(args: Prisma.SelectSubset<T, ScoresheetDeleteArgs<ExtArgs>>): Prisma.Prisma__ScoresheetClient<runtime.Types.Result.GetResult<Prisma.$ScoresheetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Scoresheet.
   * @param {ScoresheetUpdateArgs} args - Arguments to update one Scoresheet.
   * @example
   * // Update one Scoresheet
   * const scoresheet = await prisma.scoresheet.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ScoresheetUpdateArgs>(args: Prisma.SelectSubset<T, ScoresheetUpdateArgs<ExtArgs>>): Prisma.Prisma__ScoresheetClient<runtime.Types.Result.GetResult<Prisma.$ScoresheetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Scoresheets.
   * @param {ScoresheetDeleteManyArgs} args - Arguments to filter Scoresheets to delete.
   * @example
   * // Delete a few Scoresheets
   * const { count } = await prisma.scoresheet.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ScoresheetDeleteManyArgs>(args?: Prisma.SelectSubset<T, ScoresheetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Scoresheets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScoresheetUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Scoresheets
   * const scoresheet = await prisma.scoresheet.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ScoresheetUpdateManyArgs>(args: Prisma.SelectSubset<T, ScoresheetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Scoresheets and returns the data updated in the database.
   * @param {ScoresheetUpdateManyAndReturnArgs} args - Arguments to update many Scoresheets.
   * @example
   * // Update many Scoresheets
   * const scoresheet = await prisma.scoresheet.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Scoresheets and only return the `id`
   * const scoresheetWithIdOnly = await prisma.scoresheet.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ScoresheetUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ScoresheetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScoresheetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Scoresheet.
   * @param {ScoresheetUpsertArgs} args - Arguments to update or create a Scoresheet.
   * @example
   * // Update or create a Scoresheet
   * const scoresheet = await prisma.scoresheet.upsert({
   *   create: {
   *     // ... data to create a Scoresheet
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Scoresheet we want to update
   *   }
   * })
   */
  upsert<T extends ScoresheetUpsertArgs>(args: Prisma.SelectSubset<T, ScoresheetUpsertArgs<ExtArgs>>): Prisma.Prisma__ScoresheetClient<runtime.Types.Result.GetResult<Prisma.$ScoresheetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Scoresheets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScoresheetCountArgs} args - Arguments to filter Scoresheets to count.
   * @example
   * // Count the number of Scoresheets
   * const count = await prisma.scoresheet.count({
   *   where: {
   *     // ... the filter for the Scoresheets we want to count
   *   }
   * })
  **/
  count<T extends ScoresheetCountArgs>(
    args?: Prisma.Subset<T, ScoresheetCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ScoresheetCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Scoresheet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScoresheetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ScoresheetAggregateArgs>(args: Prisma.Subset<T, ScoresheetAggregateArgs>): Prisma.PrismaPromise<GetScoresheetAggregateType<T>>

  /**
   * Group by Scoresheet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScoresheetGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ScoresheetGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ScoresheetGroupByArgs['orderBy'] }
      : { orderBy?: ScoresheetGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ScoresheetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScoresheetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Scoresheet model
 */
readonly fields: ScoresheetFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Scoresheet.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ScoresheetClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  candidate<T extends Prisma.CandidateDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CandidateDefaultArgs<ExtArgs>>): Prisma.Prisma__CandidateClient<runtime.Types.Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  competition<T extends Prisma.CompetitionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CompetitionDefaultArgs<ExtArgs>>): Prisma.Prisma__CompetitionClient<runtime.Types.Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Scoresheet model
 */
export interface ScoresheetFieldRefs {
  readonly id: Prisma.FieldRef<"Scoresheet", 'String'>
  readonly createdAt: Prisma.FieldRef<"Scoresheet", 'DateTime'>
  readonly competitionId: Prisma.FieldRef<"Scoresheet", 'String'>
  readonly candidateId: Prisma.FieldRef<"Scoresheet", 'String'>
  readonly userId: Prisma.FieldRef<"Scoresheet", 'String'>
  readonly scores: Prisma.FieldRef<"Scoresheet", 'Json[]'>
  readonly total: Prisma.FieldRef<"Scoresheet", 'Decimal'>
  readonly rank: Prisma.FieldRef<"Scoresheet", 'Int'>
}
    

// Custom InputTypes
/**
 * Scoresheet findUnique
 */
export type ScoresheetFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scoresheet
   */
  select?: Prisma.ScoresheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scoresheet
   */
  omit?: Prisma.ScoresheetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScoresheetInclude<ExtArgs> | null
  /**
   * Filter, which Scoresheet to fetch.
   */
  where: Prisma.ScoresheetWhereUniqueInput
}

/**
 * Scoresheet findUniqueOrThrow
 */
export type ScoresheetFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scoresheet
   */
  select?: Prisma.ScoresheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scoresheet
   */
  omit?: Prisma.ScoresheetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScoresheetInclude<ExtArgs> | null
  /**
   * Filter, which Scoresheet to fetch.
   */
  where: Prisma.ScoresheetWhereUniqueInput
}

/**
 * Scoresheet findFirst
 */
export type ScoresheetFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scoresheet
   */
  select?: Prisma.ScoresheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scoresheet
   */
  omit?: Prisma.ScoresheetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScoresheetInclude<ExtArgs> | null
  /**
   * Filter, which Scoresheet to fetch.
   */
  where?: Prisma.ScoresheetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Scoresheets to fetch.
   */
  orderBy?: Prisma.ScoresheetOrderByWithRelationInput | Prisma.ScoresheetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Scoresheets.
   */
  cursor?: Prisma.ScoresheetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Scoresheets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Scoresheets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Scoresheets.
   */
  distinct?: Prisma.ScoresheetScalarFieldEnum | Prisma.ScoresheetScalarFieldEnum[]
}

/**
 * Scoresheet findFirstOrThrow
 */
export type ScoresheetFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scoresheet
   */
  select?: Prisma.ScoresheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scoresheet
   */
  omit?: Prisma.ScoresheetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScoresheetInclude<ExtArgs> | null
  /**
   * Filter, which Scoresheet to fetch.
   */
  where?: Prisma.ScoresheetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Scoresheets to fetch.
   */
  orderBy?: Prisma.ScoresheetOrderByWithRelationInput | Prisma.ScoresheetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Scoresheets.
   */
  cursor?: Prisma.ScoresheetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Scoresheets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Scoresheets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Scoresheets.
   */
  distinct?: Prisma.ScoresheetScalarFieldEnum | Prisma.ScoresheetScalarFieldEnum[]
}

/**
 * Scoresheet findMany
 */
export type ScoresheetFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scoresheet
   */
  select?: Prisma.ScoresheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scoresheet
   */
  omit?: Prisma.ScoresheetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScoresheetInclude<ExtArgs> | null
  /**
   * Filter, which Scoresheets to fetch.
   */
  where?: Prisma.ScoresheetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Scoresheets to fetch.
   */
  orderBy?: Prisma.ScoresheetOrderByWithRelationInput | Prisma.ScoresheetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Scoresheets.
   */
  cursor?: Prisma.ScoresheetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Scoresheets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Scoresheets.
   */
  skip?: number
  distinct?: Prisma.ScoresheetScalarFieldEnum | Prisma.ScoresheetScalarFieldEnum[]
}

/**
 * Scoresheet create
 */
export type ScoresheetCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scoresheet
   */
  select?: Prisma.ScoresheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scoresheet
   */
  omit?: Prisma.ScoresheetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScoresheetInclude<ExtArgs> | null
  /**
   * The data needed to create a Scoresheet.
   */
  data: Prisma.XOR<Prisma.ScoresheetCreateInput, Prisma.ScoresheetUncheckedCreateInput>
}

/**
 * Scoresheet createMany
 */
export type ScoresheetCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Scoresheets.
   */
  data: Prisma.ScoresheetCreateManyInput | Prisma.ScoresheetCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Scoresheet createManyAndReturn
 */
export type ScoresheetCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scoresheet
   */
  select?: Prisma.ScoresheetSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Scoresheet
   */
  omit?: Prisma.ScoresheetOmit<ExtArgs> | null
  /**
   * The data used to create many Scoresheets.
   */
  data: Prisma.ScoresheetCreateManyInput | Prisma.ScoresheetCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScoresheetIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Scoresheet update
 */
export type ScoresheetUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scoresheet
   */
  select?: Prisma.ScoresheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scoresheet
   */
  omit?: Prisma.ScoresheetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScoresheetInclude<ExtArgs> | null
  /**
   * The data needed to update a Scoresheet.
   */
  data: Prisma.XOR<Prisma.ScoresheetUpdateInput, Prisma.ScoresheetUncheckedUpdateInput>
  /**
   * Choose, which Scoresheet to update.
   */
  where: Prisma.ScoresheetWhereUniqueInput
}

/**
 * Scoresheet updateMany
 */
export type ScoresheetUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Scoresheets.
   */
  data: Prisma.XOR<Prisma.ScoresheetUpdateManyMutationInput, Prisma.ScoresheetUncheckedUpdateManyInput>
  /**
   * Filter which Scoresheets to update
   */
  where?: Prisma.ScoresheetWhereInput
  /**
   * Limit how many Scoresheets to update.
   */
  limit?: number
}

/**
 * Scoresheet updateManyAndReturn
 */
export type ScoresheetUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scoresheet
   */
  select?: Prisma.ScoresheetSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Scoresheet
   */
  omit?: Prisma.ScoresheetOmit<ExtArgs> | null
  /**
   * The data used to update Scoresheets.
   */
  data: Prisma.XOR<Prisma.ScoresheetUpdateManyMutationInput, Prisma.ScoresheetUncheckedUpdateManyInput>
  /**
   * Filter which Scoresheets to update
   */
  where?: Prisma.ScoresheetWhereInput
  /**
   * Limit how many Scoresheets to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScoresheetIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Scoresheet upsert
 */
export type ScoresheetUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scoresheet
   */
  select?: Prisma.ScoresheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scoresheet
   */
  omit?: Prisma.ScoresheetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScoresheetInclude<ExtArgs> | null
  /**
   * The filter to search for the Scoresheet to update in case it exists.
   */
  where: Prisma.ScoresheetWhereUniqueInput
  /**
   * In case the Scoresheet found by the `where` argument doesn't exist, create a new Scoresheet with this data.
   */
  create: Prisma.XOR<Prisma.ScoresheetCreateInput, Prisma.ScoresheetUncheckedCreateInput>
  /**
   * In case the Scoresheet was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ScoresheetUpdateInput, Prisma.ScoresheetUncheckedUpdateInput>
}

/**
 * Scoresheet delete
 */
export type ScoresheetDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scoresheet
   */
  select?: Prisma.ScoresheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scoresheet
   */
  omit?: Prisma.ScoresheetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScoresheetInclude<ExtArgs> | null
  /**
   * Filter which Scoresheet to delete.
   */
  where: Prisma.ScoresheetWhereUniqueInput
}

/**
 * Scoresheet deleteMany
 */
export type ScoresheetDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Scoresheets to delete
   */
  where?: Prisma.ScoresheetWhereInput
  /**
   * Limit how many Scoresheets to delete.
   */
  limit?: number
}

/**
 * Scoresheet without action
 */
export type ScoresheetDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scoresheet
   */
  select?: Prisma.ScoresheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scoresheet
   */
  omit?: Prisma.ScoresheetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScoresheetInclude<ExtArgs> | null
}
